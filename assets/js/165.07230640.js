(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{527:function(e,t,r){"use strict";r.r(t);var n=r(7),a=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"spring-cloud规范接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud规范接口"}},[e._v("#")]),e._v(" spring-cloud规范接口")]),e._v(" "),t("ul",[t("li",[e._v("LoadBalancerClient : 负载均衡客户端，RibbonLoadBalancerClient是对LoadBalancerClient的实现，exec方法包含了负载均衡的功能，Ribbon做负载均衡时用的就是它")]),e._v(" "),t("li",[e._v("LoadBalancerRequestFactory : LoadBalancerRequest 负载均衡请求工厂，用来创建LoadBalancerRequest")]),e._v(" "),t("li",[e._v("LoadBalancerRequest :  执行请求方法内容.")]),e._v(" "),t("li",[e._v("ClientHttpRequestInterceptor : RestTmplate拦截器的扩展点...")])]),e._v(" "),t("h1",{attrs:{id:"高级功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高级功能"}},[e._v("#")]),e._v(" 高级功能")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/86db30153347",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ribbon配置静态服务"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("hystrix熔断器整合")]),e._v(" "),t("p",[t("a",{attrs:{href:""}},[e._v("如何设置饥饿加载，启动就加载")])]),e._v(" "),t("blockquote",[t("p",[e._v("ribbon.eager-load.enabled=true")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/wrongyao/article/details/105476027",target:"_blank",rel:"noopener noreferrer"}},[e._v("自定义Ribbon客户端"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("针对某个服务定义局部的配置，不是全局配置。")]),e._v(" "),t("p",[e._v("支持ILoadBalancer、IRule、IPing、ServerList、ServerListFilter")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/qq_40386113/article/details/120709181",target:"_blank",rel:"noopener noreferrer"}},[e._v("直接使用Ribbon API"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("看扩展点的接口，bean就行了。")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6934153260966084615#heading-6",target:"_blank",rel:"noopener noreferrer"}},[e._v("超时重试配置，源码指点"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("说明 Ribbon 默认情况下就不支持超时重试，需要配置启用 RestClient。")]),e._v(" "),t("p",[e._v("他是通过扩展RestTemplate的ClientHttpRequestFactory接口 -> RibbonClientHttpRequestFactory 去实现的。")]),e._v(" "),t("p",[e._v("这里面才走ribbon的RetryHandler接口去执行。")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/draymond/p/12727778.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ribbon 超时配置"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("#自定义ribbon的超时时间\nribbon:\nReadTimeout:  5000      　　　　 #处理请求的超时时间，默认为5秒\nConnectTimeout: 5000    　　　　 #连接建立的超时时长，默认5秒\nMaxAutoRetries: 1               #同一台实例的最大重试次数，但是不包括首次调用，默认为1次\nMaxAutoRetriesNextServer: 0     #重试负载均衡其他实例的最大重试次数，不包括首次调用，默认为0次\nOkToRetryOnAllOperations: false #/是否对所有操作都重试，默认false")])]),e._v(" "),t("h1",{attrs:{id:"扩展点接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展点接口"}},[e._v("#")]),e._v(" 扩展点接口")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("IClientConfig ：Ribbon的客户端配置，默认采用DefaultClientConfigImpl实现。")])]),e._v(" "),t("li",[t("p",[e._v("IRule：Ribbon的负载均衡策略，默认采用ZoneAvoidanceRule实现，该策略能够在多区域环境下选出\n最佳区域的实例进行访问。")])]),e._v(" "),t("li",[t("p",[e._v("IPing：Ribbon的实例检查策略，默认采用DummyPing实现，该检查策略是一个特殊的实现，实际上\n它并不会检查实例是否可用，而是始终返回true，默认认为所有服务实例都是可用的。")])]),e._v(" "),t("li",[t("p",[e._v("ServerList：服务实例清单的维护机制，默认采用ConfigurationBasedServerList实现。  NacosServerList的扩展整合")])]),e._v(" "),t("li",[t("p",[e._v("ServerListUpdater : 动态更新服务提供方的节点信息，用默认就行了，里面会操作ServerList接口")])]),e._v(" "),t("li",[t("p",[e._v("ServerListFilter：服务实例清单过滤机制，默认采ZonePreferenceServerListFilter，该策略能够优先\n过滤出与请求方处于同区域的服务实例。")])]),e._v(" "),t("li",[t("p",[e._v("ILoadBalancer：真正的负载均衡器，默认采用ZoneAwareLoadBalancer实现，它具备了区域感知的能力。")])]),e._v(" "),t("li",[t("p",[e._v("RetryHandler: 重试策略，默认的只有简单的异常处理，真正生产环境使用都需要根据业务场景自定义重试策略")])])]),e._v(" "),t("h1",{attrs:{id:"源码解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#源码解析"}},[e._v("#")]),e._v(" 源码解析")]),e._v(" "),t("p",[e._v("["),t("a",{attrs:{href:"https://www.cnblogs.com/wang-meng/p/12151486.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ribbon 源码一：Ribbon概念理解及Demo调试"),t("OutboundLink")],1),e._v("](https://www.cnblogs.com/wang-meng/p/12151486.html)")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/wang-meng/p/12154955.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ribbon 源码二：通过Debug找出Ribbon初始化流程及ILoadBalancer原理分析"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("他的源码里面运用了大量了CAS无锁修改状态，copyAndWrite的并发内容。")])]),e._v(" "),t("p",[e._v("Ribbon重试策略RetryHandler的配置与源码分析")]),e._v(" "),t("blockquote",[t("p",[e._v("https://cloud.tencent.com/developer/article/1658791 重试的使用代码")]),e._v(" "),t("p",[e._v("https://juejin.cn/post/6934153260966084615#heading-6  配置类中生效的代码.")])]),e._v(" "),t("h2",{attrs:{id:"ribbon模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ribbon模块"}},[e._v("#")]),e._v(" Ribbon模块")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("ribbonloadbalancer")]),e._v(" "),t("th",[e._v("负载均衡模块，可独立使用，也可以和别的模块一起使用")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("Ribbon")]),e._v(" "),t("td",[e._v("内置的负载均衡算法都实现在其中")])]),e._v(" "),t("tr",[t("td",[e._v("ribbon-eureka")]),e._v(" "),t("td",[e._v("基于 Eureka 封装的模块，能够快速、方便地集成 Eureka")])]),e._v(" "),t("tr",[t("td",[e._v("ribbon-transport")]),e._v(" "),t("td",[e._v("基于 Netty 实现多协议的支持，比如 HTTP、Tcp、Udp 等")])]),e._v(" "),t("tr",[t("td",[e._v("ribbon-httpclient")]),e._v(" "),t("td",[e._v("基于 Apache HttpClient 封装的 REST 客户端，集成了负载均衡模块，可以直接在项目中使 用来调用接口")])]),e._v(" "),t("tr",[t("td",[e._v("ribbon-example")]),e._v(" "),t("td",[e._v("Ribbon 使用代码示例，通过这些示例能够让你的学习事半功倍。")])]),e._v(" "),t("tr",[t("td",[e._v("ribbon-core")]),e._v(" "),t("td",[e._v("一些比较核心且具有通用性的代码，客户端 API 的一些配置和其他 API 的定义。")])])])]),e._v(" "),t("h1",{attrs:{id:"运用到的设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运用到的设计模式"}},[e._v("#")]),e._v(" 运用到的设计模式")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("委托模式")]),e._v(" "),t("th",[e._v("PredicateBasedRule：委托给Predicate接口处理")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("模板模式和回调模式")]),e._v(" "),t("td",[e._v("BaseLoadBalancer、AbstractLoadBalancerRule 、AbstractServerPredicate")])]),e._v(" "),t("tr",[t("td",[e._v("门面模式")]),e._v(" "),t("td",[e._v("ILoadBalancer#chooseServer")])]),e._v(" "),t("tr",[t("td",[e._v("组合模式")]),e._v(" "),t("td",[e._v("CompositePredicate")])]),e._v(" "),t("tr",[t("td",[e._v("工厂模式")]),e._v(" "),t("td",[e._v("SpringClientFactory")])]),e._v(" "),t("tr",[t("td",[e._v("包装模式")]),e._v(" "),t("td",[e._v("LoadBalancerRequest")])]),e._v(" "),t("tr",[t("td",[e._v("职责链模式")]),e._v(" "),t("td",[e._v("DynamicServerListLoadBalancer")])])])]),e._v(" "),t("h1",{attrs:{id:"自己的疑惑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自己的疑惑"}},[e._v("#")]),e._v(" 自己的疑惑")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("SpringClientFactory 是不是 父子容器的概念???  不是的,")]),e._v(" "),t("blockquote",[t("p",[e._v("官方解释是: 用来给Ribbon客户端创建上下文和配置，它为每个客户机名称创建一个Spring ApplicationContext，并创建好RibbonClient客户端相关的bean和配置。")]),e._v(" "),t("p",[e._v("他主要的作用在于 实现自定义多个Ribbon客户端，不同的规则。")])])]),e._v(" "),t("li",[t("p",[e._v("重试是通过RibbonHttpRequest，而默认情况是ServiceRequestWrapper包装。 为啥他们不再一起处理呢??")]),e._v(" "),t("blockquote",[t("p",[e._v("ServiceRequestWrapper，只是包装了一下getURI方法，还会有其他的RestTemplate拦截器。\nRibbonHttpRequest  ，他是重写了executeInternal 方法， 其他的RestTemplate拦截器，不会再生效了。")])])])]),e._v(" "),t("h1",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://docs.spring.io/spring-cloud-netflix/docs/2.2.10.RELEASE/reference/html/#spring-cloud-ribbon",target:"_blank",rel:"noopener noreferrer"}},[e._v("spring-cloud官网资料"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("spring-cloud-netflix 中的 2.2.10 版本资料第7章。")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/u014494148/article/details/108915053",target:"_blank",rel:"noopener noreferrer"}},[e._v("十四.SpringCloud源码剖析-Ribbon的初始化配置"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"http://errornoerror.com/question/10963005242934470055/",target:"_blank",rel:"noopener noreferrer"}},[e._v("怎么能使用注册中心服务发现的同时自己加载本地静态ribbon啊？"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("nacos 整合的情况下，他就没有做这个功能，这里需要自己定义了。\n或者url>name规则，简单的用，来代替\n"),t("code",[e._v('@FeignClient(name = "nmg", url = "${store.ribbon.listOfServers:}", configuration = FeignCustomizedConfiguration.class)')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);