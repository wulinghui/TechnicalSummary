(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{400:function(e,t,v){"use strict";v.r(t);var a=v(7),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),t("h2",{attrs:{id:"它是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#它是什么"}},[e._v("#")]),e._v(" 它是什么")]),e._v(" "),t("p",[e._v("多宿主机编排管理容器的工具。")]),e._v(" "),t("h2",{attrs:{id:"能力"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#能力"}},[e._v("#")]),e._v(" 能力")]),e._v(" "),t("ul",[t("li",[e._v("服务发现和负载均衡")]),e._v(" "),t("li",[e._v("自动部署和回滚：")]),e._v(" "),t("li",[e._v("自动装箱计算： 做出更好的决策来管理容器的资源")]),e._v(" "),t("li",[e._v("自我修复：  会不断拉起期望的pod数量，在准备好服务之前不将其通告给客户端")]),e._v(" "),t("li",[e._v("密钥与配置管理： 无需在堆栈配置中暴露")]),e._v(" "),t("li",[e._v("弹性扩展：定义期待的容器状态与资源数量")]),e._v(" "),t("li",[e._v("存储编排：可以是本地存储、公共云提供商")])]),e._v(" "),t("h2",{attrs:{id:"竞品"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#竞品"}},[e._v("#")]),e._v(" 竞品")]),e._v(" "),t("p",[e._v("docker Swarm、mesos、Rancher")]),e._v(" "),t("h2",{attrs:{id:"架构及其术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构及其术语"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.kubernetes.org.cn/kuberneteskubernetes%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[e._v("架构及其术语"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("img",{attrs:{src:"%E5%AE%9E%E6%88%98%E4%B8%8E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86_files/1.jpg",alt:"架构图"}})]),e._v(" "),t("p",[e._v("控制平面组件： (只是管理)")]),e._v(" "),t("ul",[t("li",[e._v("apiserver： 入口，以RESTFul接口方式提供给外部客户和内部组件调用(可以非常方便的做定制化开发)")]),e._v(" "),t("li",[e._v("scheduler： 资源调度，为新建和重启的pod分配机器。")]),e._v(" "),t("li",[e._v("controller-manager: 执行各种控制器，如：定期关联 service 和 pod")])]),e._v(" "),t("p",[e._v("Node 组件 ： (具体工作)")]),e._v(" "),t("ul",[t("li",[e._v("kubelet: 负责管控docker容器。它会定期从 etcd获取分配到本机的 pod，并根据 pod 信息启动或停止相应的容器。同时，它也会接收 apiserver 的 HTTP 请求，汇报 pod 的运行状态。")]),e._v(" "),t("li",[e._v("proxy:  为pod 提供代理。当某个客户 pod 要访问其他 pod 时，访问请求会经过本机proxy做转发。")]),e._v(" "),t("li",[e._v("Container Runtime ： 容器运行时。 为真正的docker。")])]),e._v(" "),t("p",[e._v("插件（Addons）：")]),e._v(" "),t("ul",[t("li",[e._v("CoreDNS")]),e._v(" "),t("li",[e._v("Network Plugin")]),e._v(" "),t("li",[e._v("Web 界面")]),e._v(" "),t("li",[e._v("容器资源监控： Metrics-server")])]),e._v(" "),t("p",[e._v("重要概念：")]),e._v(" "),t("ul",[t("li",[e._v("Pod：最基本的部署调度单元，可以包含多个Container，逻辑上表示某种应用的一个实例。")]),e._v(" "),t("li",[e._v("Service： 用户操作的基本单元，是真实应用服务的抽象，对应多个pod。通过 Proxy 的 port 和服务 selector 决定服务请求传递给后端提供服务的容器。")]),e._v(" "),t("li",[e._v("ReplicationController ： 复制集抽象， 保证实际运行Pod数量总是与该复制数量相等")]),e._v(" "),t("li",[e._v("Label: 为pod加上一组标签，Service和RC通过Label和Pod进行关键。")])]),e._v(" "),t("p",[t("img",{attrs:{src:"%E5%AE%9E%E6%88%98%E4%B8%8E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86_files/2.jpg",alt:"架构和功能总结"}})]),e._v(" "),t("h1",{attrs:{id:"安装和基本使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装和基本使用"}},[e._v("#")]),e._v(" 安装和基本使用")]),e._v(" "),t("h2",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),t("ul",[t("li",[e._v("环境准备：关闭Swap、禁用SELINUX、加载ipvs模块、安装Docker")]),e._v(" "),t("li",[e._v("安装kubeadm（能够快速安装 kubernetes 集群） "),t("code",[e._v("yum install kubeadm-1.21.5 kubectl-1.21.5 kubelet-1.21.5 -y")])]),e._v(" "),t("li",[e._v("kubeadm init 集群初始化；")]),e._v(" "),t("li",[e._v("配置kubectl访问集群")]),e._v(" "),t("li",[e._v("安装 POD network Flannel网络插件")]),e._v(" "),t("li",[e._v("配置Master node 参与工作负载(否则主节点没有pod，浪费资源)")]),e._v(" "),t("li",[e._v("Node Join： 使用kubeadm join 把其他节点加入（Join 证书过期的坑，重新生成，kubeadm证书续期）。")]),e._v(" "),t("li",[e._v("HA 集群：这里没做ha，一主多node模式。")])]),e._v(" "),t("blockquote",[t("p",[e._v("注意: docker 3个核心技术 namespace   => cgroup 和k8s一致才行。版本要一致。\n集群中的3个ip端要互相独立，最好别设公网的地址。\nkubadm只是安装工具。之后可以卸载。")])]),e._v(" "),t("ul",[t("li",[e._v("有些需要开放UDP的端口。")])]),e._v(" "),t("h2",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[e._v("#")]),e._v(" 概念")]),e._v(" "),t("h3",{attrs:{id:"node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[e._v("#")]),e._v(" node")]),e._v(" "),t("p",[e._v("节点，都安装了Kubeadm, Kubelet, Kubectl,kube-proxy等等组件")]),e._v(" "),t("h3",{attrs:{id:"namespace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#namespace"}},[e._v("#")]),e._v(" Namespace")]),e._v(" "),t("p",[e._v("命名空间，适用于存在很多跨多个团队或项目的用户的场景。\n不同版本应该使用标签 来区分同一名字空间中的不同资源。\n4个初始命名空间： default、kube-system、kube-public、kube-node-lease")]),e._v(" "),t("h1",{attrs:{id:"kubectl使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubectl使用"}},[e._v("#")]),e._v(" kubectl使用")]),e._v(" "),t("p",[e._v("客户端命令行工具(可以随意安装再一台机器中)，用于部署和管理Kubernetes应用程序。\n可以检查群集资源; 创建，删除和更新组件;")]),e._v(" "),t("h2",{attrs:{id:"kubectl-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubectl-配置"}},[e._v("#")]),e._v(" Kubectl 配置")]),e._v(" "),t("ul",[t("li",[e._v("默认配置在 $HOME/.kube 目录")]),e._v(" "),t("li",[e._v("设置集群参数、客户端认证参数、设置上下文参数、默认上下文")])]),e._v(" "),t("blockquote",[t("p",[e._v("上下文: 将配置中的多集群【clusters】和多用户【users】 绑定。")])]),e._v(" "),t("ul",[t("li",[e._v("配置自动补全： 默认是没有自动补全的，需要自己配置。")])]),e._v(" "),t("h2",{attrs:{id:"常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),t("ul",[t("li",[e._v("kubectl create： 通过 yaml/json 文件或者标准输入创建一个资源对象。")]),e._v(" "),t("li",[e._v("kubectl run 创建并运行一个或多个容器镜像")]),e._v(" "),t("li",[e._v("kubectl explain 查看资源对象的详细信息")]),e._v(" "),t("li",[e._v("kubectl get 获取一个或多个资源对象的信息")]),e._v(" "),t("li",[e._v("kubectl get pod -o wide 查看pod资源")]),e._v(" "),t("li",[e._v("kubectl describe 显示一个或多个资源对象的详细信息")]),e._v(" "),t("li",[e._v("kubectl logs 输出 pod 资源对象中一个容器的日志")]),e._v(" "),t("li",[e._v("kubectl attach 连接到一个运行的容器")]),e._v(" "),t("li",[e._v("kubectl exec 在指定容器内执行命令")]),e._v(" "),t("li",[e._v("kubectl label 增删改资源的标签")]),e._v(" "),t("li",[e._v("kubectl get pod -w 监听pod节点变化")]),e._v(" "),t("li",[e._v("watch -n 1 kubectl get pod  每隔1s执行 kubectl get pod指令。")]),e._v(" "),t("li",[e._v("get sa   查看service account安全证书的内容。")]),e._v(" "),t("li",[e._v("kubectl get ep 查看ip和端口，也叫端点")]),e._v(" "),t("li",[e._v("kubectl get svc 查看服务和对应的CLUSTER-IP、EXTERNAL-IP")]),e._v(" "),t("li",[e._v("kubectl api resouce  查看简写。")]),e._v(" "),t("li",[e._v("kubectl apply/delete  .  当前目录下所有的yaml文件都执行。")]),e._v(" "),t("li",[e._v("kubectl rollout 暂停/继续/回滚/历史记录  ：   支持版本滚动升级和版本回退；")])]),e._v(" "),t("h1",{attrs:{id:"dashboard-仪表板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dashboard-仪表板"}},[e._v("#")]),e._v(" dashboard(仪表板)")]),e._v(" "),t("p",[e._v("web的客户端，将通用的基于Web的监控和操作界面。\n可以创建 pod,service,deployment,application。\n可以完全替换命令行工具，监控和故障排除。")]),e._v(" "),t("h2",{attrs:{id:"安装-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-2"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),t("ul",[t("li",[e._v("下载安装文件和 image。")]),e._v(" "),t("li",[e._v("kubectl apply -f kubernetes-dashboard.yaml")]),e._v(" "),t("li",[e._v("坑:配置外网访问（不配置的话默认只能集群内访问）")])]),e._v(" "),t("h2",{attrs:{id:"访问-dashboard"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问-dashboard"}},[e._v("#")]),e._v(" 访问 dashboard")]),e._v(" "),t("ul",[t("li",[e._v("获取登陆 token")]),e._v(" "),t("li",[e._v("使用kubeconf 登陆")])]),e._v(" "),t("h1",{attrs:{id:"pod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pod"}},[e._v("#")]),e._v(" Pod")]),e._v(" "),t("p",[e._v("在 k8s 中我们不会直接操作容器，而是把容器包装成 Pod 再进行管理。\n每启动一个Pod都会附加启动基础容器（pause），它只做网络和等待挂起。\n一个 Pod 中的应用容器共享同一组资源：PID 命名空间、网络命名空间、IPC 命名空间、共享一个主机名、共享存储卷")]),e._v(" "),t("ul",[t("li",[e._v("最小操作单元")]),e._v(" "),t("li",[e._v("pod内容器共享资源")]),e._v(" "),t("li",[e._v("生命周期管理: 挂起、运行、成功、失败、未知")]),e._v(" "),t("li",[e._v("容器探测")]),e._v(" "),t("li",[e._v("容器限额")])]),e._v(" "),t("h2",{attrs:{id:"pod-的设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pod-的设计"}},[e._v("#")]),e._v(" Pod 的设计")]),e._v(" "),t("ul",[t("li",[e._v("无状态和有状态分开。")]),e._v(" "),t("li",[e._v("一个pod内多个子应用，来实现一个功能。")]),e._v(" "),t("li",[e._v("负载采用多个pod，而不是再一个pod里面设置多个容器。")])]),e._v(" "),t("h2",{attrs:{id:"pod-创建与删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pod-创建与删除"}},[e._v("#")]),e._v(" pod 创建与删除")]),e._v(" "),t("ul",[t("li",[e._v("kubectl 创建 pod")]),e._v(" "),t("li",[e._v("kubectl的 Yaml 文件创建 pod")])]),e._v(" "),t("blockquote",[t("p",[e._v("k run nginx --image=nginx:1.9 --port=80 --dry-run=client -o yaml>nginx.yaml")])]),e._v(" "),t("ul",[t("li",[e._v("dashboard 的  Yaml 文件创建 pod")])]),e._v(" "),t("h2",{attrs:{id:"生命周期管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生命周期管理"}},[e._v("#")]),e._v(" 生命周期管理")]),e._v(" "),t("p",[t("code",[e._v("kubectl get pod XXX")])]),e._v(" "),t("ul",[t("li",[e._v("Pending: 正在构建中，如拉取镜像")]),e._v(" "),t("li",[e._v("Running: 主容器至少有一个正在运行中 (ready标识代表真正能提供服务的数量。)")]),e._v(" "),t("li",[e._v("Succeeded: 都正常运行完毕，并且已经退出了")]),e._v(" "),t("li",[e._v("Failed: 以不正常的状态（非 0 的返回码）退出。")]),e._v(" "),t("li",[e._v("Unknown ： 异常状态")])]),e._v(" "),t("h2",{attrs:{id:"重启策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重启策略"}},[e._v("#")]),e._v(" 重启策略")]),e._v(" "),t("p",[e._v("Always(默认策略，总是重启), OnFailure(失败重启), Never（决不重启）")]),e._v(" "),t("h2",{attrs:{id:"pod-资源的配额和限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pod-资源的配额和限制"}},[e._v("#")]),e._v(" Pod 资源的配额和限制")]),e._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[e._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("limits")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 最多不超过,防止某个Pod无限制地使用资源，导致其他Pod崩溃")]),e._v("\n\t "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("cpu")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 700m\n\t "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("memory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 200Mi\n "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("requests")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 需要以下,能够保证Pod有足够的资源来运行")]),e._v("\n\t "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("cpu")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 700m\n\t "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("memory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 200Mi\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("当节点的资源不够时，先删除没有指定、再删除设置的不一致、最后再删除参数一致的。")]),e._v(" "),t("h2",{attrs:{id:"静态pod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态pod"}},[e._v("#")]),e._v(" 静态Pod")]),e._v(" "),t("p",[e._v("由于静态Pod只受所在节点的kubelet控制，可以有效预防通过kubectl、或管理工具操作的误删除，可以用来部署核心组件应用。")]),e._v(" "),t("h2",{attrs:{id:"初始化容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化容器"}},[e._v("#")]),e._v(" 初始化容器")]),e._v(" "),t("ul",[t("li",[e._v("init 容器必须先于 应用容器启动")]),e._v(" "),t("li",[e._v("仅当 init 容器完成后，才能运行应用容器")]),e._v(" "),t("li",[e._v("当一个 Pod 有多个 init 容器时，这些 init 容器是顺序运行的.")]),e._v(" "),t("li",[e._v("当初始化容器执行失败时,视为pod失败触发重启策略。")]),e._v(" "),t("li",[e._v("同一个pod，共享资源: 磁盘和挂载的内容。")]),e._v(" "),t("li",[e._v("执行过程中是pending状态状态。\n应用场景:")]),e._v(" "),t("li",[e._v("初始化容器可以包含不能随普通容器一起发布出去的敏感信息。")]),e._v(" "),t("li",[e._v("初始化容器可以包含用户自定义的代码、工具，如sed、awk、python等方便完成初始化、设置工作。")]),e._v(" "),t("li",[e._v("因为初始化逻辑与主体业务逻辑分布在不同的image中，因此image构建者与主体业务逻辑开发者可以各自独立的工作。")]),e._v(" "),t("li",[e._v("初始化容器使用Linux namespace，不同于普通应用容器，具有不同的文件系统视图，并且对于低层的操作系统有更在的访问权限。")]),e._v(" "),t("li",[e._v("应用启动的前置条件不具备时，初始化容器可以阻止普通应用容器启动，避免在条件不具备时反复启动注定会失败的容器而浪费系统资源。\n如:  Web 服务,查看数据库服务是否启动成功。   初始化一些配置项")])]),e._v(" "),t("h2",{attrs:{id:"pod-的健康检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pod-的健康检查"}},[e._v("#")]),e._v(" Pod 的健康检查")]),e._v(" "),t("p",[e._v("通过探针实现，探针是由kubelet 对容器执行的定期诊断。")]),e._v(" "),t("p",[e._v("探测方式：")]),e._v(" "),t("ul",[t("li",[e._v("Exec 探针：执行进程的地方，容器的状态由进程的退出状态代码0确认；")]),e._v(" "),t("li",[e._v("Http get 探针：向容器发送 HTTP GET 请求，通过响应的 HTTP 状态代码判断容器是否准备好；如果响应的状态码大于等于 200 且小于 400，则诊断被认为是成功的")]),e._v(" "),t("li",[e._v("Tcp socket 探针：它打开一个 TCP 连接到容器的指定端口，如果连接己建立，则认为容器己准备就绪。")]),e._v(" "),t("li",[e._v("gRPC 探针 ： 需要配置开启gRPC功能。\n探测结果：")]),e._v(" "),t("li",[e._v("成功：容器通过了诊断。")]),e._v(" "),t("li",[e._v("失败：容器未通过诊断。 若未通过检查，则根据不同的探测类型,不同的处理方式。")]),e._v(" "),t("li",[e._v("未知：表示说当前这次检查操作没有完整执行，可能是因为超时或一些脚本没有及时返回。此时Readiness-probe或Liveness-probe不做任何操作，会等待下一次的机制来进行检验。")])]),e._v(" "),t("p",[e._v("探测类型： 通过不同的探针实现不同的检测功能。")]),e._v(" "),t("ul",[t("li",[e._v("livenessProbe/存活探针 ：  判断容器是否正在运行,是否需要重启。整个生命周期内运行在容器上，以周期的探测。若liveness探测到Pod不健康时，会通过kubelet杀掉该pod，并根据重启策略来判断是否重启这个pod。")])]),e._v(" "),t("blockquote",[t("p",[e._v("背景: 许多长时间运行的应用程序最终会转变为损坏状态，除非重新启动，否则无法恢复。\n查看RESTARTS字段知道重启的时间。")])]),e._v(" "),t("ul",[t("li",[e._v("readinessProbe/就绪探针 ： 判断容器是否准备好接受请求。整个生命周期内运行在容器上，以周期的探测。如果探测失败，端点控制器将从与 Pod 匹配的所有 service endpoints 中 剔除删除该 Pod 的 IP 地址。")])]),e._v(" "),t("blockquote",[t("p",[e._v("有时应用程序暂时无法提供流量，您不想杀死应用程序，但也不想向它发送请求。")])]),e._v(" "),t("ul",[t("li",[e._v("startupProbe/启动探针 ：")])]),e._v(" "),t("blockquote",[t("p",[e._v("您必须处理在首次初始化时可能需要额外启动时间的遗留应用程序。\nfailureThreshold * periodSeconds 为等待最大的时间，超过则认为失败。\n只在启动时执行，在 startupProbe 状态为 Success 之前，其他所有探针都处于无效状态，直到它成功后其他探针才起作用。如果 startupProbe 失败，kubelet 将杀死容器，容器将根据 restartPolicy 来重启。")])]),e._v(" "),t("h2",{attrs:{id:"pod设计原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pod设计原则"}},[e._v("#")]),e._v(" pod设计原则")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.51cto.com/article/710490.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("多种模式容器"),t("OutboundLink")],1),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("边车容器 ： 是将辅助功能从主业务容器独立或解耦出来，做成一个辅助容器，这个容器也可以被重用")]),e._v(" "),t("li",[e._v("代理容器")]),e._v(" "),t("li",[e._v("适配器容器")])]),e._v(" "),t("h2",{attrs:{id:"pod-调度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pod-调度"}},[e._v("#")]),e._v(" Pod 调度")]),e._v(" "),t("h3",{attrs:{id:"调度原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调度原理"}},[e._v("#")]),e._v(" 调度原理:")]),e._v(" "),t("ul",[t("li",[e._v("预选策略,强制性规则，遍历所有的Node节点，按照具体的预选策略筛选出符合要求的Node列表，如没有Node符合Predicates策略规则，那该Pod就会被挂起，直到有Node能够满足。")]),e._v(" "),t("li",[e._v("优选策略,第一步筛选的基础上，按照优选策略为待选Node打分排序，获取最优者；")])]),e._v(" "),t("h3",{attrs:{id:"调度过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调度过程"}},[e._v("#")]),e._v(" 调度过程:")]),e._v(" "),t("ol",[t("li",[e._v("用户提交 pod，APIServer 记录到 etcd 中；")]),e._v(" "),t("li",[e._v("scheduler 监听到etcd变化，再查询APIServer，以获取未绑定的 pod，尝试为 pod 分配节点；")]),e._v(" "),t("li",[e._v("scheduler 调度：首先过滤不符合 pod 资源要求的主机。然后考虑整体优化策略对主机打分，比如使用最低负载，使用分散主机等。最后选择最高分的主机存储绑定信息到 etcd 中；")]),e._v(" "),t("li",[e._v("kubelet 监听到etcd变化 ，查询绑定对象，获取需要在本机启动的 pod 并通过 docker 启动。")])]),e._v(" "),t("h3",{attrs:{id:"调度类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调度类型"}},[e._v("#")]),e._v(" 调度类型:")]),e._v(" "),t("h4",{attrs:{id:"自动调度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动调度"}},[e._v("#")]),e._v(" 自动调度")]),e._v(" "),t("p",[e._v("运行在哪个Node节点上完全由Scheduler经过一系列的算法计算得出。"),t("br"),e._v("\n默认所有节点都不过载，使用率最小的节点。")]),e._v(" "),t("h4",{attrs:{id:"定向调度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定向调度"}},[e._v("#")]),e._v(" 定向调度")]),e._v(" "),t("ul",[t("li",[e._v("NodeName :  调度到指定的name的Node节点")]),e._v(" "),t("li",[e._v("NodeSelector :  调度到添加了指定标签的Node节点上。  如有硬盘，放mysql等等其他的作用。")])]),e._v(" "),t("h4",{attrs:{id:"亲和性调度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#亲和性调度"}},[e._v("#")]),e._v(" 亲和性调度")]),e._v(" "),t("p",[e._v("亲和性：提高性能；如果两个应用频繁交互，那么就有必要利用亲和性让两个应用尽可能的靠近，这样可以较少因网络通信而带来的性能损耗。\n反亲和性：高可用；当应用采用多副本部署的时候，那么就有必要利用反亲和性让各个应用实例打散分布在各个Node上，这样可以提高服务的高可用性。")]),e._v(" "),t("ul",[t("li",[e._v("NodeAffinity:  以Node为目标，解决Pod可以调度到那些Node的问题。")])]),e._v(" "),t("blockquote",[t("p",[e._v("和nodeSelector的区别:\n如果一个Pod所在的Node在Pod运行期间其标签发生了改变，不再符合该Pod的nodeAffinity的要求，则系统将忽略此变化。\n比nodeSelector更加灵活，有关系符、权重、硬限制、软限制。")])]),e._v(" "),t("ul",[t("li",[e._v("PodAffinity:   以Pod为目标，解决Pod可以和那些已存在的Pod部署在同一个拓扑域中的问题。")]),e._v(" "),t("li",[e._v("PodAntiAffinity: 以Pod为目标，解决Pod不能和那些已经存在的Pod部署在同一拓扑域中的问题。")])]),e._v(" "),t("h4",{attrs:{id:"污点-容忍-调度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#污点-容忍-调度"}},[e._v("#")]),e._v(" 污点（容忍）调度")]),e._v(" "),t("p",[e._v("都是针对node的操作。")]),e._v(" "),t("ul",[t("li",[e._v("Taints :   使用kubeadm搭建的集群，默认就会给Master节点添加一个污点标记，所以Pod就不会调度到Master节点上")])]),e._v(" "),t("blockquote",[t("p",[e._v("污点3种类型:\nPreferNoSchedule(不再优先调度): 将尽量避免把Pod调度到具有该污点的Node上，除非没有其他节点可以调度。\nNoSchedule(不再调度):  将不会把Pod调度到具有该污点的Node上，但是不会影响当前Node上已经存在的Pod。\nNoExecute(不执行) : 将不会把Pod调度到具有该污点的Node上，同时也会将Node上已经存在的Pod驱逐。")])]),e._v(" "),t("ul",[t("li",[e._v("Toleration :  污点就是拒绝，容忍就是忽略，Node通过污点拒绝Pod调度上去，Pod通过容忍忽略拒绝。")])]),e._v(" "),t("blockquote",[t("p",[e._v("添加容忍的规则，这里必须和标记的污点规则相同。")])]),e._v(" "),t("h1",{attrs:{id:"工作负载-pod-控制器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作负载-pod-控制器"}},[e._v("#")]),e._v(" 工作负载：Pod 控制器")]),e._v(" "),t("ul",[t("li",[e._v("ReplicationController：比较原始的pod控制器，已经被废弃，由ReplicaSet替代")]),e._v(" "),t("li",[e._v("ReplicaSet：使 Pod 拥有自愈，多副本，扩缩容的能力")]),e._v(" "),t("li",[e._v("Deployment：通过ReplicaSet来控制pod，并支持滚动升级、版本回退")]),e._v(" "),t("li",[e._v("Horizontal Pod Autoscaler：可以根据集群负载自动调整Pod的数量，实现削峰填谷")]),e._v(" "),t("li",[e._v("DaemonSet：在集群中的指定Node上都运行一个副本，一般用于守护进程类的任务")]),e._v(" "),t("li",[e._v("Job：它创建出来的pod只要完成任务就立即退出，用于执行一次性任务")]),e._v(" "),t("li",[e._v("Cronjob：它创建的pod会周期性的执行，用于执行周期性任务")]),e._v(" "),t("li",[e._v("StatefulSet：管理有状态应用")])]),e._v(" "),t("h2",{attrs:{id:"replicaset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replicaset"}},[e._v("#")]),e._v(" ReplicaSet")]),e._v(" "),t("p",[e._v("保证一定数量的pod能够正常运行，它会持续监听这些pod运行状态，一旦pod发生故障，就会重启或重建。同时它还支持对pod数量的扩缩容和版本镜像的升降级。")]),e._v(" "),t("ul",[t("li",[e._v("yaml定义内容:  副本数replicas、Label Selector、Pod 模板")]),e._v(" "),t("li",[e._v("多副本： 多个同样的pod，–replicas=2，注意名字的变化")]),e._v(" "),t("li",[e._v("自愈能力:  doerk/pod删了，laber删了，多余的pod，都会重新调度到期待的副本数量。")]),e._v(" "),t("li",[e._v("扩缩容能力 : 可以再运行过程中，修改replicas数量； 2种方法: 直接编辑yaml(kubectl edit rs)， 命令(kubectl scale rs)")]),e._v(" "),t("li",[e._v("镜像版本升降级 : 删除pod后再重新部署，不建议使用； 同上直接编辑yaml")])]),e._v(" "),t("blockquote",[t("p",[e._v("RC和RS的区别??  rs 基于集合、rc基于等式 （一开始只有rc） rs更加灵活。 其他都相同。")])]),e._v(" "),t("h2",{attrs:{id:"deployment"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deployment"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),t("p",[e._v("通过管理ReplicaSet来间接管理Pod,比ReplicaSet功能更强大。\nrs的功能上层封装抽象，更有利于滚动升级，解决了rs的升级困难。")]),e._v(" "),t("ul",[t("li",[e._v("原理: 都是先生成一个新的rs再删除旧的rs。")]),e._v(" "),t("li",[e._v("yaml定义内容,同RS，控制器定义和模板。多一个type，默认RollingUpdate（滚动更新）")]),e._v(" "),t("li",[e._v("滚动更新可以配置:  新创建几个maxSurge，删除几个maxUnavailable")]),e._v(" "),t("li",[e._v("所以一般用Deployment，而不使用ReplicaSet\n功能:")]),e._v(" "),t("li",[e._v("支持ReplicaSet的所有功能")]),e._v(" "),t("li",[e._v("支持版本滚动升级和版本回退； kubectl rollout 暂停/继续/回滚/历史记录")]),e._v(" "),t("li",[e._v("支持发布的停止、继续； 用于实现金丝雀发布")]),e._v(" "),t("li",[e._v("还有故障转移: 节点挂了，会自动迁移。")])]),e._v(" "),t("blockquote",[t("p",[e._v("label就只能改yaml文件的。 会先创建rs的label再创建自己的label")])]),e._v(" "),t("h2",{attrs:{id:"daemonset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#daemonset"}},[e._v("#")]),e._v(" DaemonSet")]),e._v(" "),t("p",[e._v("可以保证集群中每一台（或指定）节点上都运行一个副本，一般适合于日志收集、节点监控等常见。\n也就是说，如果一个pod提供的功能是节点级别的（每个节点都需要且仅需要一个），那么这类Pod就适合使用DaemonSet类型的控制器创建。")]),e._v(" "),t("ul",[t("li",[e._v("内置有: kuble-proxy，csi-nfs动态存储，calico网络的Pod")]),e._v(" "),t("li",[e._v("污点调度的配置，会影响node节点。")]),e._v(" "),t("li",[e._v("yaml定义同RS")])]),e._v(" "),t("h2",{attrs:{id:"job"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#job"}},[e._v("#")]),e._v(" Job")]),e._v(" "),t("p",[e._v("Job主要用于负责批量处理（一次处理多个任务）、短暂的、一次性任务。\n有以下2个特点：")]),e._v(" "),t("ul",[t("li",[e._v("当job创建的pod执行成功结束时，job将记录成功结束后的pod数量")]),e._v(" "),t("li",[e._v("当成功结束的pod达到指定的数量时，job将完成执行\n由于默认job不会删除Pod，所以一般要配置一个ttl的删除的参数。")])]),e._v(" "),t("h2",{attrs:{id:"cronjob"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cronjob"}},[e._v("#")]),e._v(" CronJob")]),e._v(" "),t("p",[e._v("定时job，每次都会重新生成一个pod，默认保留最近的3个。")]),e._v(" "),t("h2",{attrs:{id:"statefulset-sts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#statefulset-sts"}},[e._v("#")]),e._v(" StatefulSet(sts)")]),e._v(" "),t("p",[e._v("yaml定义:")]),e._v(" "),t("ul",[t("li",[e._v("用于定义网络标志（DNS domain）的 Headless Service")]),e._v(" "),t("li",[e._v("用于创建 PersistentVolumes 的 volumeClaimTemplates")]),e._v(" "),t("li",[e._v("其他的和RS一样。")])]),e._v(" "),t("p",[e._v("适用于具有以下特点的应用：")]),e._v(" "),t("ul",[t("li",[e._v("具有固定的网络标记（主机名）")]),e._v(" "),t("li",[e._v("具有持久化存储")]),e._v(" "),t("li",[e._v("需要按顺序部署和扩展")]),e._v(" "),t("li",[e._v("需要按顺序终止及删除")]),e._v(" "),t("li",[e._v("需要按顺序滚动更新")])]),e._v(" "),t("p",[e._v("网络标识：")]),e._v(" "),t("ul",[t("li",[e._v("要求: StatefulSet 当前需要无头服务 来负责 Pod 的网络标识。")]),e._v(" "),t("li",[e._v("每个pod都有固定的主机名,格式为$(StatefulSet 名称)-$(序号) ; DNS名: $(pod 名称).$(所属服务的 DNS 域名)")]),e._v(" "),t("li",[e._v("再搭建集群时可以使用 redis-0、redis-1这种模式来使用。")]),e._v(" "),t("li",[e._v("尽量用DNS全域名，防止跨namespace也能使用。 (主机名用于局域网中；域名用于公网中。)\nDeployment的区别:\n有状态的服务， 有序的启动并发能力不强，这也是deploy的部署无状态的优势。")])]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("ul",[t("li",[e._v("Deployment : 无状态应用部署；如微服务，提供多副本。")]),e._v(" "),t("li",[e._v("StatefulSet ： 有状态应用部署；如数据库，提供稳定的存储或网络等")]),e._v(" "),t("li",[e._v("DaemonSet ： 守护型应用部署；如日志收集，在每个node都要运行一份。")]),e._v(" "),t("li",[e._v("job/Cronjob : 定时任务；如垃圾清理")])]),e._v(" "),t("h1",{attrs:{id:"服务-service"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务-service"}},[e._v("#")]),e._v(" 服务（Service）")]),e._v(" "),t("h2",{attrs:{id:"定义-微服务的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义-微服务的概念"}},[e._v("#")]),e._v(" 定义:  微服务的概念")]),e._v(" "),t("p",[e._v("无需修改应用程序即可使用不熟悉的服务发现机制。 Kubernetes 为Pods 提供自己的 IP 地址，并为一组 Pod 提供相同的 DNS 名， 并且可以在它们之间进行负载均衡。")]),e._v(" "),t("ul",[t("li",[e._v("ipvs 就是负载均衡。")])]),e._v(" "),t("h2",{attrs:{id:"使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[e._v("#")]),e._v(" 使用:")]),e._v(" "),t("ul",[t("li",[e._v("与pod绑定: 服务的连接对所有的后端pod是负载均衡的，至于哪些 pod 被属于哪个服务，通过在定义服务的时候设置标签选择器；")]),e._v(" "),t("li",[e._v("没有选择算符的 Service： 可以自定义（kind : Endpoints） 绑定的外部ip:prot。")]),e._v(" "),t("li",[e._v("创建方式:  1. 命令行: kubectl create svc  或者 kubectl expose  2. yaml中定义 kind : Service")]),e._v(" "),t("li",[e._v("两个端口: port 服务提供的端口 ； targetPort指定 pod 中进程监听的端口")]),e._v(" "),t("li",[e._v("同一个 deployment 暴露多次显示多个服务名称")]),e._v(" "),t("li",[e._v("使用命名的端口")])]),e._v(" "),t("h2",{attrs:{id:"常用指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[e._v("#")]),e._v(" 常用指令")]),e._v(" "),t("ul",[t("li",[e._v("kubectl get svc")])]),e._v(" "),t("h2",{attrs:{id:"headless-services"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#headless-services"}},[e._v("#")]),e._v(" Headless Services")]),e._v(" "),t("p",[e._v("没头的 Service： 有时不需要或不想要负载均衡，以及单独的 Service IP。遇到这种情况，可以通过指定 Cluster IP（spec.clusterIP）的值为 “None” 来创建 Headless Service。\ndns 查询会如实的返回 2 个真实的endpoint")]),e._v(" "),t("p",[e._v("使用场景：\n第一种：自主选择权，有时候client想自己来决定使用哪个Real Server，可以通过查询DNS来获取Real Server的信息。\n第二种：Headless Service对应的每一个Endpoints，即每一个Pod，都会有对应的DNS域名；这样Pod之间就可以互相访问。【结合statefulset有状态服务使用，如Web、MySQL集群】")]),e._v(" "),t("p",[e._v("区别:\n有头IP : 客户所在的宿主机来做负载。"),t("br"),e._v("\n无头IP :  给了所有的pod的ip列表。     这是DNS来做负载。")]),e._v(" "),t("h2",{attrs:{id:"服务注册和域名发现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务注册和域名发现"}},[e._v("#")]),e._v(" 服务注册和域名发现")]),e._v(" "),t("ul",[t("li",[e._v("两级域名访问:  Coredns 、 Host 。 coredns和宿主机的dns是2个不同的。\n发现服务方式:")])]),e._v(" "),t("ol",[t("li",[e._v("通过环境变量发现服务: 如果创建的服务早于客户端 pod 的创建，pod 上的进程可以根据环境变量获得服务的 IP 地址和端口号； 否则不能")]),e._v(" "),t("li",[e._v("CoreDNS 域名解析过程 ：  pod访问其他的pod  ->  coreDns  -> api service -> etcd  获得service name和 ip 。")])]),e._v(" "),t("blockquote",[t("p",[e._v("在部署 CoreDNS 应用前，至少需要创建一个 ConfigMap(存配置)、一个 Deployment 和一个 Service共 3 个资源对象。\n域名解析过程分析 :  resolv.conf 文件分析 -> nameserver -> search 域 -> options -> pod 之间的通信、通过 svc 访问")])]),e._v(" "),t("p",[e._v("访问使用:")]),e._v(" "),t("ul",[t("li",[e._v("service名字在宿主机不生效。")]),e._v(" "),t("li",[e._v("在pod里可以用service name 访问；也可以用service ip访问。")]),e._v(" "),t("li",[e._v("查找同命名空间的服务 : 直接name访问")]),e._v(" "),t("li",[e._v("查找不同命名空间的服务 : 垮namespace 访问需要 "),t("code",[e._v("name.Namespace")])])]),e._v(" "),t("p",[e._v("Pod 级别的 DNS 配置说明:\ndnsPolicy 项目 设置默认配置为'Default'")]),e._v(" "),t("ul",[t("li",[e._v("Default：继承 Pod 所在宿主机的 DNS 设置。")]),e._v(" "),t("li",[e._v("ClusterFirst：优先使用 Kubernetes 环境的 DNS 服务（如 CoreDNS 提供的域名解析服务），将无法解析的域名转发到从宿主机继承的 DNS 服务器。")]),e._v(" "),t("li",[e._v("ClusterFirstWithHostNet：与 ClusterFirst 相同，对于以 hostNetwork 模式运行的 Pod，应明确指定使用该策略。")]),e._v(" "),t("li",[e._v("None：忽略 Kubernetes 环境的 DNS 配置，通过 spec.dnsConfig 自定义 DNS 配置。这个选项从 Kubernetes 1.9 版本开始引入")])]),e._v(" "),t("h2",{attrs:{id:"负载均衡的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡的实现"}},[e._v("#")]),e._v(" 负载均衡的实现")]),e._v(" "),t("p",[e._v("4种访问:  externlIp:port     clusterIP:port   NodeIp:port    podip:targetPort")]),e._v(" "),t("h3",{attrs:{id:"clusterip-别名service-ip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clusterip-别名service-ip"}},[e._v("#")]),e._v(" ClusterIP(别名service ip)")]),e._v(" "),t("p",[e._v("默认类型，自动分配一个仅Cluster内部可以访问的虚拟IP。 它只有在svc变化时ip才变。\n他和podIp的关系，是由kubctl-proxy + ipvs（别用iptables）来做。 他的负载也是由宿主机来做的。")]),e._v(" "),t("h3",{attrs:{id:"nodeport"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nodeport"}},[e._v("#")]),e._v(" NodePort")]),e._v(" "),t("p",[e._v("通过每个 Node 上的 IP 和静态端口（NodePort）暴露服务。以ClusterIP为基础，NodePort 服务会路由到 ClusterIP 服务。通过请求 "),t("NodeIP",[e._v(":"),t("NodePort",[e._v("，可以从集群的外部访问一个集群内部的 NodePort 服务。\n外部可以直接访问pod服务。  肯定会有Cluster-ip生成。 一般所有节点都要开port，危险。  网关可以使用他，建议用loadbance。")])],1)],1),e._v(" "),t("h3",{attrs:{id:"loadbalancer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loadbalancer"}},[e._v("#")]),e._v(" LoadBalancer")]),e._v(" "),t("p",[e._v("使用云提供商的负载均衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 NodePort 服务和 ClusterIP 服务。\n它拥有自己独一无二的可公开访问的 IP 地址；\nLoadBalance 其实是 NodePort 的一种扩展，使得服务可以通过一个专用的负载均衡器来访问:")]),e._v(" "),t("p",[e._v("他可以通过使用 NodePort 的方式来访问服务（节点 IP+节点端口）；同时也可以通过 EXTERNAL-IP 来访问\n过程: externlIp:port   -> clusterIP:port  -> podIP: targetPort")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/cleverfoxloving/article/details/79186574",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubernetes/k8s接合阿里云LoadBalancer/负载均衡"),t("OutboundLink")],1),e._v("\nmatelab :\n为裸机集群提供网络负载平衡器的实现,如果未在受支持的 IaaS 平台上运行，将无限期保持 pending 状态\n一个domanset  、一个DeployMent")]),e._v(" "),t("p",[e._v("优点： 是它的通用性  ,MetalLB 提供了故障转移功能\n缺点： Layer 2 模式下存在单节点瓶颈，服务所有流量都经过一个 Node 节点。")]),e._v(" "),t("p",[e._v("防止不必要的网络跳数（一个优化点）:"),t("br"),e._v("\n当外部客户端通过节点端口连接到服务时，随机选择的 pod 并不一定在接收连接的同一节\n点上运行；可以通过将服务配置为仅将外部通信重定向到接收连接的节点上运行的 pod 来\n阻止此额外跳数；\n设置externalTrafficPolicy: Local 。  也就是直接用local而尽量不重定向。")]),e._v(" "),t("h1",{attrs:{id:"ingress-and-网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ingress-and-网络"}},[e._v("#")]),e._v(" Ingress and 网络")]),e._v(" "),t("p",[e._v("外部访问有nodeport   ，loadbance 2种方式。 但是比较麻烦/不安全，所以有ingress。")]),e._v(" "),t("p",[e._v("该对象允许外部访问 k8s 服务， 通过创建规则集合来配置访问权限，这些规则定义了哪些入站连接可以访问哪些服务；\nIngress 仅支持 HTTP 和 HTTPS 协议； 公开 HTTP 和 HTTPS 以外的服务通常使用 Service.Type=NodePort 或 Service.Type=LoadBalancer 类型的服务。\ningress 可配置用于提供外部可访问的服务 url、负载均衡流量、SSL终端和提供虚拟主机名配置。")]),e._v(" "),t("p",[e._v("过程:  ingress(类似于网关) -> 路由多个service -> pod")]),e._v(" "),t("p",[e._v("它相当于是部署在某个node的nodeport的服务。公网域名就可以直接解析到这个node了。")]),e._v(" "),t("blockquote",[t("p",[e._v("所以一般就定义一台服务器，打上标签专门用来部署ingress。")])]),e._v(" "),t("p",[e._v("安装组成:")]),e._v(" "),t("ul",[t("li",[e._v("Nginx Controller ：  （Namespace, Deployment, Service, RBAC ,Secret information）")]),e._v(" "),t("li",[e._v("Ingress Rule ：  创建 Ingress 资源 ，设置路由的一些规则和目的地。")]),e._v(" "),t("li",[e._v("Default-Backend ： 没有 rules 的 Ingress 将所有流量发送到同一个默认后端。\nIngress-nginx 的高可用 : Ingress + LoadBalancer")])]),e._v(" "),t("p",[e._v("使用：")]),e._v(" "),t("ul",[t("li",[e._v("基于名称的虚拟托管 -根据域名访问 ： 让后台负载均衡器基于 host 头部字段 来路由请求。")]),e._v(" "),t("li",[e._v("简单扇出 ： 通过uri路由到多个Service")]),e._v(" "),t("li",[e._v("暴露多个服务 :   rules 和 paths 是数组，可以配置多个，映射同样服务 ;")]),e._v(" "),t("li",[e._v("路径重写：")]),e._v(" "),t("li",[e._v("限流 ：")]),e._v(" "),t("li",[e._v("处理https的TLS 传输")])]),e._v(" "),t("p",[e._v("pod的网络类型 :  bridge/host")]),e._v(" "),t("p",[e._v("Network policy  :")]),e._v(" "),t("ul",[t("li",[e._v("相当于 Access controller list 网络安全。")]),e._v(" "),t("li",[e._v("规范包含在给定命名空间中定义特定网络策略所需的所有信息")])]),e._v(" "),t("h1",{attrs:{id:"存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储"}},[e._v("#")]),e._v(" 存储")]),e._v(" "),t("h2",{attrs:{id:"核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[e._v("#")]),e._v(" 核心概念")]),e._v(" "),t("h3",{attrs:{id:"volume"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[e._v("#")]),e._v(" Volume")]),e._v(" "),t("blockquote",[t("p",[e._v("属于 Pod 内部共享资源存储，生命周期和 Pod 相同，与 Container 无关，即使 Pod 上的容\n器停止或者重启，Volume 不会受到影响，但是如果 Pod 终止，那么这个 Volume 的生命周\n期也将结束。")])]),e._v(" "),t("h3",{attrs:{id:"persistentvolume-pv"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#persistentvolume-pv"}},[e._v("#")]),e._v(" PersistentVolume（PV）")]),e._v(" "),t("blockquote",[t("p",[e._v("PV 持久卷和普通的 Volume 一样，也是使用 卷插件来实现的，只是它们拥有独立于任何使用 PV 的 Pod 的生命周期。\n简单的说就是持久化的，pod删除后还存在")])]),e._v(" "),t("p",[e._v("阶段状态:")]),e._v(" "),t("ul",[t("li",[e._v("Available – 资源尚未被 claim 使用")]),e._v(" "),t("li",[e._v("Bound – 卷已经被绑定到 claim 了")]),e._v(" "),t("li",[e._v("Released – claim 被删除，卷处于释放状态，但未被集群回收。")]),e._v(" "),t("li",[e._v("Failed – 卷自动回收失败")])]),e._v(" "),t("p",[e._v("访问模式 (VolumeMode) ：\nReadWriteOnce(RWO)\n卷可以被一个节点以读写方式挂载。 ReadWriteOnce 访问模式也允许运行在同一节点上的多个 Pod 访问卷。\nReadOnlyMany(ROM)\n卷可以被多个节点以只读方式挂载。\nReadWriteMany(RWM)\n卷可以被多个节点以读写方式挂载。\nReadWriteOncePod(RWOP)\n卷可以被单个 Pod 以读写方式挂载。 如果你想确保整个集群中只有一个 Pod 可以读取或写入该 PVC， 请使用ReadWriteOncePod 访问模式。这只支持 CSI 卷以及需要 Kubernetes 1.22 以上版本。")]),e._v(" "),t("p",[e._v("注意:")]),e._v(" "),t("ul",[t("li",[e._v("pv不分namespace，所有的共享。")]),e._v(" "),t("li",[e._v("还有快照的功能。")])]),e._v(" "),t("h3",{attrs:{id:"persistentvolumeclaim-pvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#persistentvolumeclaim-pvc"}},[e._v("#")]),e._v(" PersistentVolumeClaim (PVC)")]),e._v(" "),t("p",[e._v("对PV资源的请求抽象。")]),e._v(" "),t("p",[e._v("生命周期：\nProvisioning ——-> Binding ——–>Using——>Releasing——>Recycling")]),e._v(" "),t("ul",[t("li",[e._v("供应准备 Provisioning--- 通过集群外的存储系统或者云平台来提供存储持久化支持。 有静态提供和动态提供。")]),e._v(" "),t("li",[e._v("绑定 Binding---用户创建 pvc 并指定需要的资源和访问模式。在找到可用 pv 之前，pvc 会保持未绑定状态。")]),e._v(" "),t("li",[e._v("使用 Using---用户可在 pod 中像 volume 一样使用 pvc。")]),e._v(" "),t("li",[e._v("释放 Releasing---用户删除 pvc 来回收存储资源，pv 将变成“released”状态。由于还保留着之前的数据，这些数据需要根据不同的策略来处理，否则这些存储资源无法被其他 pvc 使用。")]),e._v(" "),t("li",[e._v("回收Recycling---pv可以设置三种回收策略：保留（Retain），回收（Recycle）和删除（Delete）。")])]),e._v(" "),t("blockquote",[t("p",[e._v("保留策略：允许人工处理保留的数据。\n删除策略：将删除 pv 和外部关联的存储资源，需要插件支持。\n回收策略：将执行清除操作，之后可以被新的 pvc 使用，需要插件支持。")])]),e._v(" "),t("p",[e._v("使用方法：\nPVC 只有绑定了 PV 之后才能被 Pod 使用，而 PVC 绑定 PV 的过程即是消费 PV 的过程，这个过程是系统自动实现的、且有有一定规则的，\n他们的关系绑定是自己维护的。 当然也可以指定name做强制绑定。"),t("br"),e._v("\n下面规则都满足的 PV 才能被 PVC 绑定：")]),e._v(" "),t("ul",[t("li",[e._v("VolumeMode：被消费 PV 的 VolumeMode 需要和 PVC 一致；")]),e._v(" "),t("li",[e._v("AccessMode：被消费 PV 的 AccessMode 需要和 PVC 一致；")]),e._v(" "),t("li",[e._v("StorageClassName：如果 PVC 定义了此参数，PV 必须有相关的参数定义才能进行绑定；")]),e._v(" "),t("li",[e._v("LabelSelector：通过 label 匹配的方式从 PV 列表中选择合适的 PV 绑定；")]),e._v(" "),t("li",[e._v("storage：被消费 PV 的 capacity 必须大于或者等于 PVC 的存储容量需求才能被绑定。")])]),e._v(" "),t("p",[e._v("注意:")]),e._v(" "),t("ul",[t("li",[e._v("PVC 和 PV 是一一对应的。")]),e._v(" "),t("li",[e._v("PV 和 PVC 中的 spec 关键字段要匹配，比如存储（storage）大小、访问模式。")]),e._v(" "),t("li",[e._v("PV 和 PVC 中的 storageClassName 字段必须一致。")]),e._v(" "),t("li",[e._v("必须先删pvc再删pv")]),e._v(" "),t("li",[e._v("应用必须用 绑定好的pvc和pv 的内容。")]),e._v(" "),t("li",[e._v("回收策略，在删除pvc时才触发")]),e._v(" "),t("li",[e._v("设置了非空 selector 的 PVC 对象无法让集群为其动态供应 PV 卷。")])]),e._v(" "),t("h3",{attrs:{id:"storageclass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storageclass"}},[e._v("#")]),e._v(" StorageClass")]),e._v(" "),t("p",[e._v("PV 和 PVC 都只是抽象的概念。StorageClass 相当于实现类，实现不同的功能。\n为管理员提供了一种描述他们提供的存储的“类”的方法。\n不同的类可能映射到服务质量级别，或备份策略，或者由群集管理员确定的任意策略。")]),e._v(" "),t("ul",[t("li",[e._v("支持的实现: 目前包含有 NFS、ceph、iSCSI 和云提供商指定的存储系统")])]),e._v(" "),t("h3",{attrs:{id:"dynamic-provisioning-动态供给"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-provisioning-动态供给"}},[e._v("#")]),e._v(" Dynamic Provisioning 动态供给")]),e._v(" "),t("p",[e._v("背景:")]),e._v(" "),t("blockquote",[t("p",[e._v("PV 是运维人员来创建的，开发操作 PVC，可是大规模集群中可能会有很多 PV，如果这些 PV 都需要运维手动来处理这也是一件很繁琐的事情")])]),e._v(" "),t("p",[e._v("它的作用就是创建 PV 模板，并且直接绑定到应用。\n所以它直接建pvc就行了，pv会动态创建出来。")]),e._v(" "),t("h2",{attrs:{id:"驱动-plugin实现方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#驱动-plugin实现方法"}},[e._v("#")]),e._v(" 驱动 Plugin实现方法")]),e._v(" "),t("ul",[t("li",[e._v("In Tree ： 默认的，它们与核心 kubernetes 二进制文件链接，编译，构建和一起发布。")]),e._v(" "),t("li",[e._v("FlexVolume ： 解决了 In-Tree 方式的强耦合，不过还是有好多问题。")]),e._v(" "),t("li",[e._v("CSI ： 接口的目标是为 CO 建立标准化机制，以将任意存储系统暴露给其容器化工作负载，各个云产商可以提供。")])]),e._v(" "),t("blockquote",[t("p",[e._v("csi  2大优势，  百度一下：存储多路径，跟快，冗余备份。不需要root权限。")])]),e._v(" "),t("h2",{attrs:{id:"使用-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-2"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),t("p",[e._v("3种访问存储资源方式:")]),e._v(" "),t("h3",{attrs:{id:"直接访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#直接访问"}},[e._v("#")]),e._v(" 直接访问")]),e._v(" "),t("p",[e._v("把Volume的基本信息完全暴露给用户，有严重的安全隐患，同时需要协调不同users对Volume的访问\nvolumeMounts.mountPath 设置目录。")]),e._v(" "),t("h3",{attrs:{id:"静态provision"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态provision"}},[e._v("#")]),e._v(" 静态provision")]),e._v(" "),t("p",[e._v("需要先创建PV\nNFS存储demo步骤:")]),e._v(" "),t("ul",[t("li",[e._v("创建一个 NFS 服务器作为 K8s 的存储系统。")]),e._v(" "),t("li",[e._v("创建PV ：")]),e._v(" "),t("li",[e._v("创建PVC")]),e._v(" "),t("li",[e._v("创建pod ： spec.volumes.persistentVolumeClaim.claimName 指定pvc")])]),e._v(" "),t("h3",{attrs:{id:"动态provision"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态provision"}},[e._v("#")]),e._v(" 动态provision")]),e._v(" "),t("p",[e._v("PV由PVC模板创建了。")]),e._v(" "),t("ul",[t("li",[e._v("安装插件")]),e._v(" "),t("li",[e._v("创建StorageClass")]),e._v(" "),t("li",[e._v("创建PVC ：  storageClassName要保持一致。")]),e._v(" "),t("li",[e._v("创建POD")])]),e._v(" "),t("p",[e._v("StatefulSet动态存储的编写。\nStatefulSet 使用 volumeClaimTemplates来选择存储\nstatefluset，不需要写pvc了，就定义一个name。   其中的一个pod删除了，重启后的pvc还是一样的。\n删除sts后他是不删除pvc的。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  volumeClaimTemplates:\n  - metadata:\n      name: test\n      annotations:\n        volume.beta.kubernetes.io/storage-class: "nfs-csi" # nfs-csi的动态存储。\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("注意: nfs 默认不支持动态存储，需要第三方插件。")]),e._v(" "),t("h1",{attrs:{id:"configmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configmap"}},[e._v("#")]),e._v(" Configmap")]),e._v(" "),t("p",[e._v("使用场景:")]),e._v(" "),t("ul",[t("li",[e._v("用来存储配置文件的 kubernetes 资源对象，配置内容都存储在 etcd 中")]),e._v(" "),t("li",[e._v("相当于配置中心，存配置的。")]),e._v(" "),t("li",[e._v("在一个namespace中公用。")])]),e._v(" "),t("p",[e._v("定义:")]),e._v(" "),t("ul",[t("li",[e._v("通过直接在命令行中指定 configmap 参数创建，即--from-literal")]),e._v(" "),t("li",[e._v("通过指定文件创建，即将一个配置文件创建为一个 ConfigMap --from-file=<文件>")]),e._v(" "),t("li",[e._v("通过指定目录创建，即将一个目录下的所有配置文件创建为一个 ConfigMap，--from-file=<目录>")]),e._v(" "),t("li",[e._v("事先写好标准的 configmap 的 yaml 文件，然后 kubectl create -f 创建")])]),e._v(" "),t("p",[e._v("使用:\n第一种是通过环境变量的方式，直接传递给 pod")]),e._v(" "),t("blockquote",[t("p",[e._v("使用 configmap 中指定的 key ; 使用 configmap 中所有的 key\nspec.containers.name.env.valueFromonfigMapKeyRef   指定要用的 key\nspec.containers.name.env.configMapRef   使得 configmap 中的所有 key/value 对都自动变成环境变量\n第二种是通过在 pod 的命令行下运行的方式(启动命令中)\n通过环境变量，再命令中使用环境变量。")])]),e._v(" "),t("p",[e._v("第三种是作为 volume 的方式挂载到 pod 内")]),e._v(" "),t("blockquote",[t("p",[e._v("更新 ConfigMap 后：\n使用该 ConfigMap 挂载的 Env 不会同步更新\n使用该 ConfigMap 挂载的 Volume 中的数据需要一段时间（实测大概 10 秒）才能同步更新\nspec.volumes.configMap 定义卷的内容形式，使用就和使用卷一样。")])]),e._v(" "),t("p",[e._v("区别:\nenv 可以一个一个的改。\nenvform 是文件所有的都加进入，后来的值会有覆盖前面的key内容。 key value 也都是完全一样的。")]),e._v(" "),t("h1",{attrs:{id:"secrets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#secrets"}},[e._v("#")]),e._v(" Secrets")]),e._v(" "),t("p",[e._v("使用场景:\nSecret 解决了密码、token、密钥等敏感数据的配置问题，\n而不需要把这些敏感数据暴露到镜像或者 Pod Spec 中。\nSecret 可以以 Volume 或者环境变量的方式使用。")]),e._v(" "),t("p",[e._v("三种类型:")]),e._v(" "),t("ul",[t("li",[e._v("Opaque：base64 编码格式的 Secret，用来存储密码、密钥等；但数据也通过 base64 –decode=解码得到原始数据")]),e._v(" "),t("li",[e._v("kubernetes.io/dockerconfigjson：用来存储私有 docker registry 的认证信息。")]),e._v(" "),t("li",[e._v("kubernetes.io/service-account-token： 用于被 serviceaccount 引用。")])]),e._v(" "),t("p",[e._v("定义方法:")]),e._v(" "),t("ul",[t("li",[e._v("Yaml 文件")]),e._v(" "),t("li",[e._v("从文件中产生")])]),e._v(" "),t("p",[e._v("使用同Configmap：")]),e._v(" "),t("p",[e._v("注意:")]),e._v(" "),t("ul",[t("li",[e._v("env是解密之后的真实内容。")]),e._v(" "),t("li",[e._v("Yaml定义时需要自己用base64加密.")]),e._v(" "),t("li",[e._v("命令行直接是明文。")])]),e._v(" "),t("h1",{attrs:{id:"保护机制-poddisruptionbudget"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#保护机制-poddisruptionbudget"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.jianshu.com/p/ac43a0876a5b",target:"_blank",rel:"noopener noreferrer"}},[e._v("保护机制 PodDisruptionBudget"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("为了保证业务不中断或业务SLA不降级，需要将应用进行集群化部署。\n通过PodDisruptionBudget 控制器可以设置应用POD集群处于运行状态最低个数，也可以设置应用POD集群处于运行状态的最低百分比。\n这样可以保证在主动销毁应用POD的时候，不会一次性销毁太多的应用POD，从而保证业务不中断或业务SLA不降级。")]),e._v(" "),t("p",[e._v("应用场景：")]),e._v(" "),t("ul",[t("li",[e._v("节点维护或升级时")]),e._v(" "),t("li",[e._v("zk、kafka等等的集群一定保证有对应的节点")])]),e._v(" "),t("h1",{attrs:{id:"应用自动弹性伸缩-hpa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用自动弹性伸缩-hpa"}},[e._v("#")]),e._v(" 应用自动弹性伸缩 HPA")]),e._v(" "),t("p",[e._v("Horizontal Pod Autoscaler 根据观察到的 CPU 利用率（或者，在自定义指标 支持下，根据其他一些应用程序提供的指标）\n自动扩展复制控制器、部署、副本集或有状态集中的 Pod 数量。\n原理：\n监控当前cpu和预期cpu对比，操作repalce副本实现扩缩容。\n其他再DeployMent等等基础上的抽象封装。\n底层还是通过scalable/sclar指令扩容。")]),e._v(" "),t("p",[e._v("使用:")]),e._v(" "),t("ul",[t("li",[e._v("部署metrics-server(用于监控cpu等等)  可以用kubectl top node 验证安装成功。")]),e._v(" "),t("li",[e._v("rs/rc/deployment定义中，必须有 resources.requests 的请求，用于计算需要分配的基础。")]),e._v(" "),t("li",[e._v("部署HPA，2种方式、命令行 和 yaml创建。  需要定义min/max副本、目标期望的利用率设置")])]),e._v(" "),t("p",[e._v("注意：")]),e._v(" "),t("ul",[t("li",[e._v("HPA不适用于无法缩放的对象，例如 DaemonSet。")]),e._v(" "),t("li",[e._v("自动扩缩容，云通过namespace来区分，可以设置限制。")]),e._v(" "),t("li",[e._v("Vertical Pod Autoscaler（VPA) 是解决资源配额（Pod的CPU、内存的limit/request）评估不准的问题。")]),e._v(" "),t("li",[e._v("Horizontal Pod Autoscaler（HPA）则要解决的是业务负载压力波动很大，需要人工根据监控报警来不断调整副本数的问题。")]),e._v(" "),t("li",[e._v("min 新版本可以设置0。")]),e._v(" "),t("li",[e._v("扩的比较快，缩的比较慢（默认360秒才开始伸缩）")])]),e._v(" "),t("h1",{attrs:{id:"yaml编写注意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yaml编写注意"}},[e._v("#")]),e._v(" yaml编写注意:")]),e._v(" "),t("ul",[t("li",[e._v("不同资源用---区分。")])]),e._v(" "),t("h1",{attrs:{id:"wordpress部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wordpress部署"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/tutorials/stateful-application/mysql-wordpress-persistent-volume/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Wordpress部署"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Wordpress ：\ndeployment(记得加resources.requests)、service采用NodePort、PVC(存静态文件且被多个pod共享、nfs、12G、RWM)、")]),e._v(" "),t("p",[e._v("configMap、Secret： 配置host、username、password等等内容、用于mysql和Wordpress 共享")]),e._v(" "),t("p",[e._v("Mysql 部署: StatefulSet、无头service(内部连接使用、且更快)、PVC(nfs、10G、RWO)、configMap（my.cnf配置文件）")]),e._v(" "),t("p",[e._v("Ingress : 定义wp的访问入口。")]),e._v(" "),t("p",[e._v("HPA的创建：  "),t("code",[e._v("kubectl autoscale deployment wordpress --min=1 --max=40 --cpu-percent=3")])]),e._v(" "),t("h1",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/cuichongxin/article/details/118544112",target:"_blank",rel:"noopener noreferrer"}},[e._v("【Kubernetes】k8s多集群切换【含上下文作用详解】【含6443端口不可达处理方法】"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://kubernetes.io/docs/reference/kubectl/cheatsheet/",target:"_blank",rel:"noopener noreferrer"}},[e._v("指令操作指南"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/a1a0d64f1245",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubernetes如何对kubectl做用户权限管理"),t("OutboundLink")],1)])]),e._v(" "),t("blockquote",[t("p",[e._v("Subject 权限类型有3种，ServiceAccount用于管理 Secret （秘钥）资源\nuser不是k8s的对象，serviceaccuont是k8s的用户")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/heian_99/article/details/114490830",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes的服务质量（QoS）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/h-gallop/p/11774752.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("静态Pod"),t("OutboundLink")],1)])]),e._v(" "),t("blockquote",[t("p",[e._v("k8s内置的一些pod，如etcd、控制器pod都是这样实现的。")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/weixin_36338224/article/details/122930460",target:"_blank",rel:"noopener noreferrer"}},[e._v("图解 K8S（04）：吃透 Pod 中的第三类容器 -- init 容器;过程比较详细"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/dkfajsldfsdfsd/article/details/81094883",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubernetes之初始化容器; 用途，定义"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/duanbaoke/article/details/119815870",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pod 健康检查（探针）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/0f084259a04e",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubernets pod调度原理"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/qq_34857250/article/details/90259693",target:"_blank",rel:"noopener noreferrer"}},[e._v("pod调度策略，一篇就够"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/huiyichanmian/p/15701778.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pod的调度的例子"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/zackstang/p/14528477.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pod控制器详解"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/weixin_60092693/article/details/123537647",target:"_blank",rel:"noopener noreferrer"}},[e._v("K8S学习之Statefulset"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/qq_19676401/article/details/119996434",target:"_blank",rel:"noopener noreferrer"}},[e._v("pod设计原则? 3种模式"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/353230313",target:"_blank",rel:"noopener noreferrer"}},[e._v("k8s operator 理解"),t("OutboundLink")],1)])]),e._v(" "),t("blockquote",[t("p",[e._v("开发自己的控制器，自动化“pod崩溃恢复的逻辑”")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/zhanglianghhh/p/13682265.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes K8S之Service服务详解与示例"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/157565821",target:"_blank",rel:"noopener noreferrer"}},[e._v("详解k8s 4种类型Service"),t("OutboundLink")],1)])]),e._v(" "),t("blockquote",[t("p",[e._v("各类的网络处理流程详细，")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/lsx_3/article/details/124399768",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes 容器中获取Pod信息: Downward API"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/tasks/inject-data-application/environment-variable-expose-pod-information/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网: 通过环境变量将 Pod 信息呈现给容器"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/qq_31136839/article/details/100183026",target:"_blank",rel:"noopener noreferrer"}},[e._v("API聚合机制扩展API资源"),t("OutboundLink")],1)])]),e._v(" "),t("blockquote",[t("p",[e._v("再API-service上面，封装一层，解耦提高性能和可扩展第三方。")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/476208338",target:"_blank",rel:"noopener noreferrer"}},[e._v("HPA 还是 KEDA，如何在 Kubernetes 中更有效的使用弹性扩缩容？"),t("OutboundLink")],1)])]),e._v(" "),t("blockquote",[t("p",[e._v("HPA 只基于 CPU、内存或任何外部指标源执行自动缩放。\n向 HPA 添加新指标很困难。 比如: 挂起的消息队列大小等等业务的指标。\nKEDA是事件驱动自动扩缩器，我们可以使用 Prometheus 作为扩展部署的度量源。\n业务只要操作Prometheus的监控就行了。 这是不是又和监控系统做了优秀的整合。")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/d14be0c0e0eb",target:"_blank",rel:"noopener noreferrer"}},[e._v("镜像拉取策略"),t("OutboundLink")],1)])]),e._v(" "),t("blockquote",[t("p",[e._v("IfNotPresent(默认，只有当镜像在本地不存在时才会拉取) ； Always (总是) ； Never（不从仓库获得）")])]),e._v(" "),t("h1",{attrs:{id:"疑问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#疑问"}},[e._v("#")]),e._v(" 疑问")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("docker 3个核心技术?")])]),e._v(" "),t("li",[t("p",[e._v("isto  => AB测试、蓝绿测试.")])]),e._v(" "),t("li",[t("p",[e._v("vnc是啥？ 远程登录图形桌面系统客户端。")])]),e._v(" "),t("li",[t("p",[e._v("东西 南北流量。")])]),e._v(" "),t("li",[t("p",[e._v("k8s用于nodeport暴露在外面。")])]),e._v(" "),t("li",[t("blockquote",[t("p",[e._v("k8s 定义3大接口 CSI、CRI、CNI")])])]),e._v(" "),t("li",[t("p",[e._v("对外会生成一个ip。   这样如果公网怎么做域名解析？")])]),e._v(" "),t("li",[t("p",[e._v("3大组件趋势:  docker k8s   ，servicemesh isto（微服务的功能）   ，service less fass函数型编程。")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);