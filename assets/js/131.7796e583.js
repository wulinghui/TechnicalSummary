(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{490:function(t,a,v){"use strict";v.r(a);var i=v(7),_=Object(i.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("AQS定义了一套多线程访问共享资源的同步器框架，是一个依赖状态(state)的同步器。也是MESA模型的定义")]),t._v(" "),a("p",[t._v("java.util.concurrent包中的大多数同步器实现都是围绕着共同的基础行为，比如等待队列、条件队列、独占获取、共享获取等，而这些行为的抽象就是基于AbstractQueuedSynchronizer（简称AQS）实现的，AQS是一个抽象同步框架，可以用来实现一个依赖状态的同步器。")]),t._v(" "),a("p",[t._v("JDK中提供的大多数的同步器如Lock, Latch, Barrier等，都是基于AQS框架来实现的")]),t._v(" "),a("ul",[a("li",[t._v("一般是通过一个内部类Sync继承 AQS")]),t._v(" "),a("li",[t._v("将同步器所有调用都映射到Sync对应的方法")])]),t._v(" "),a("h1",{attrs:{id:"aqs具备特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aqs具备特性"}},[t._v("#")]),t._v(" AQS具备特性")]),t._v(" "),a("ul",[a("li",[t._v("阻塞等待队列")]),t._v(" "),a("li",[t._v("共享/独占")]),t._v(" "),a("li",[t._v("公平/非公平")]),t._v(" "),a("li",[t._v("可重入")]),t._v(" "),a("li",[t._v("允许中断")])]),t._v(" "),a("h1",{attrs:{id:"资源共享方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源共享方式"}},[t._v("#")]),t._v(" 资源共享方式")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Exclusive-独占")]),t._v(" "),a("blockquote",[a("p",[t._v("只有一个线程能执行，如ReentrantLock")])])]),t._v(" "),a("li",[a("p",[t._v("Share-共享")]),t._v(" "),a("blockquote",[a("p",[t._v("多个线程可以同时执行，如ReadWriteLock/Semaphore/CountDownLatch")])])])]),t._v(" "),a("h1",{attrs:{id:"自定义同步器实现时主要实现方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义同步器实现时主要实现方法"}},[t._v("#")]),t._v(" 自定义同步器实现时主要实现方法")]),t._v(" "),a("p",[t._v("不同的自定义同步器竞争共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS已经在顶层实现好了。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("isHeldExclusively()")]),t._v(" "),a("blockquote",[a("p",[t._v("该线程是否正在独占资源。只有用到condition才需要去实现它。")])])]),t._v(" "),a("li",[a("p",[t._v("tryAcquire(int)")]),t._v(" "),a("blockquote",[a("p",[t._v("独占方式。尝试获取资源，成功则返回true，失败则返回false。")])])]),t._v(" "),a("li",[a("p",[t._v("tryRelease(int) 独占方式。尝试释放资源")]),t._v(" "),a("blockquote",[a("p",[t._v("独占方式。尝试释放资源，成功则返回true，失败则返回false。")])])]),t._v(" "),a("li",[a("p",[t._v("tryAcquireShared(int) 共享方式。尝试获取资源。")]),t._v(" "),a("blockquote",[a("p",[t._v("共享方式。尝试获取资源。负数表示失败；0表示成功没有剩余可用资源；正数表示成功有剩余资源。")])])]),t._v(" "),a("li",[a("p",[t._v("tryReleaseShared(int) 共享方式。尝试释放资源")]),t._v(" "),a("blockquote",[a("p",[t._v("共享方式。尝试释放资源。如果释放后允许唤醒后续等待结点返回true，否则返回false。")])])])]),t._v(" "),a("h1",{attrs:{id:"condition接口详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#condition接口详解"}},[t._v("#")]),t._v(" Condition接口详解")]),t._v(" "),a("p",[t._v("java.util.concurrent类库中提供Condition类来实现线程之间的协调。调用Condition.await() 方法使线程等待，其他线程调用Condition.signal() 或 Condition.signalAll() 方法唤醒等待的线程。")]),t._v(" "),a("p",[a("strong",[t._v("注意：调用Condition的await()和signal()方法，都必须在lock保护之内。")])]),t._v(" "),a("ol",[a("li",[t._v("调用Condition#await方法会释放当前持有的锁，然后阻塞当前线程，同时向Condition队列尾部添加一个节点，所以调用Condition#await方法的时候必须持有锁。")]),t._v(" "),a("li",[t._v("调用Condition#signal方法会将Condition队列的首节点移动到阻塞队列尾部，然后唤醒因调用Condition#await方法而阻塞的线程(唤醒之后这个线程就可以去竞争锁了)，所以调用Condition#signal方法的时候必须持有锁，持有锁的线程唤醒被因调用Condition#await方法而阻塞的线程。")])]),t._v(" "),a("h1",{attrs:{id:"aqs框架实现源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aqs框架实现源码"}},[t._v("#")]),t._v(" AQS框架实现源码")]),t._v(" "),a("p",[t._v("state、cas、队列")]),t._v(" "),a("h2",{attrs:{id:"volatile-int-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile-int-state"}},[t._v("#")]),t._v(" volatile int state")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("state表示资源的可用状态")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("值为0，初始化状态，表示当前节点在sync队列中，等待着获取锁。")]),t._v(" "),a("li",[t._v("CANCELLED，值为1，表示当前的线程被取消；")]),t._v(" "),a("li",[t._v("SIGNAL，值为-1，表示当前节点的后继节点包含的线程需要运行，也就是unpark；")]),t._v(" "),a("li",[t._v("CONDITION，值为-2，表示当前节点在等待condition，也就是在condition队列中；")]),t._v(" "),a("li",[t._v("PROPAGATE，值为-3，表示当前场景下后续的acquireShared能够得以执行；")])])])]),t._v(" "),a("li",[a("p",[t._v("访问方式:")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("getState()")]),t._v(" "),a("li",[t._v("setState()")]),t._v(" "),a("li",[t._v("compareAndSetState()")])])])])]),t._v(" "),a("h2",{attrs:{id:"同步等待队列-clh队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步等待队列-clh队列"}},[t._v("#")]),t._v(" 同步等待队列(CLH队列)")]),t._v(" "),a("p",[t._v("AQS当中的同步等待队列也称CLH队列，CLH队列是Craig、Landin、Hagersten三人发明的一种基于双向链表数据结构的队列，是FIFO先进先出线程等待队列，Java中的CLH队列是原CLH队列的一个变种,线程由原自旋机制改为阻塞机制。")]),t._v(" "),a("p",[t._v("AQS 依赖CLH同步队列来完成同步状态的管理：")]),t._v(" "),a("ul",[a("li",[t._v("当前线程如果获取同步状态失败时，AQS则会将当前线程已经等待状态等信息构造成一个节点（Node）并将其加入到CLH同步队列，同时会阻塞当前线程")]),t._v(" "),a("li",[t._v("当同步状态释放时，会把首节点唤醒（公平锁），使其再次尝试获取同步状态。")]),t._v(" "),a("li",[t._v("通过signal或signalAll将条件队列中的节点转移到同步队列。（由条件队列转化为同步队列）")])]),t._v(" "),a("h2",{attrs:{id:"条件等待队列-condition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件等待队列-condition"}},[t._v("#")]),t._v(" 条件等待队列（Condition）")]),t._v(" "),a("p",[t._v("是一个多线程间协调通信的工具类，使得某些线程一起等待某个条件,只有当该条件具备时，这些等待线程才会被唤醒，放到同步等待队列中，从而重新争夺锁。")]),t._v(" "),a("p",[t._v("AQS中条件队列是使用单向列表保存的，用nextWaiter来连接:")]),t._v(" "),a("ul",[a("li",[t._v("调用await方法阻塞线程；")]),t._v(" "),a("li",[t._v("当前线程存在于同步队列的头结点，调用await方法进行阻塞（从同步队列转化到条件队列）")])]),t._v(" "),a("h2",{attrs:{id:"exclusiveownerthread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exclusiveownerthread"}},[t._v("#")]),t._v(" exclusiveOwnerThread")]),t._v(" "),a("p",[t._v("父类AbstractOwnableSynchronizer的exclusiveOwnerThread属性，代表当前执行的线程.")]),t._v(" "),a("h2",{attrs:{id:"主体流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主体流程"}},[t._v("#")]),t._v(" 主体流程")]),t._v(" "),a("p",[t._v("不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS已经在顶层实现好了。")]),t._v(" "),a("h1",{attrs:{id:"自己的疑惑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自己的疑惑"}},[t._v("#")]),t._v(" 自己的疑惑")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/Sky_QiaoBa_Sum/article/details/112386838",target:"_blank",rel:"noopener noreferrer"}},[t._v("独占/共享 有啥主要的区别"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("共享式获取与独占式获取最大的区别就是同一时刻能否有多个线程同时获取到同步状态。")]),t._v(" "),a("ul",[a("li",[t._v("共享式访问资源时，同一时刻其他共享式的访问会被允许。")]),t._v(" "),a("li",[t._v("独占式访问资源时，同一时刻其他访问均被阻塞。")])]),t._v(" "),a("p",[t._v("me:  共享式就是提前设置好了waitState，允许后面的都访问。 如果资源判断成功就可以一直往下唤醒。")]),t._v(" "),a("p",[t._v("可以看Semaphore解锁多个次数，如果不用共享模式的话，不持续唤醒就会，等着其他线程去竞争就浪费资源了。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);