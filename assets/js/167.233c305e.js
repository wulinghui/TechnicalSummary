(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{525:function(t,a,s){"use strict";s.r(a);var r=s(7),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("网关作为流量的入口，常用的功能包括路由转发，权限校验，限流等。\nSpring Cloud Gateway 是Spring Cloud官方推出的第二代网关框架，定位于取代 Netflix Zuul。相比 Zuul 来说，Spring Cloud Gateway 提供更优秀的性能，更强大的有功能。\nSpring Cloud Gateway 是由 WebFlux + Netty + Reactor 实现的响应式的 API 网关。"),a("strong",[t._v("它不能在传统的 servlet 容器中工作，也不能构建成 war 包。")]),t._v("\nSpring Cloud Gateway 旨在为微服务架构提供一种简单且有效的 API 路由的管理方式，并基于 Filter 的方式提供网关的基本功能，例如说安全认证、监控、限流等等。")]),t._v(" "),a("h1",{attrs:{id:"核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),a("h2",{attrs:{id:"路由-route"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由-route"}},[t._v("#")]),t._v(" 路由（route)")]),t._v(" "),a("p",[t._v("路由是网关中最基础的部分，路由信息包括一个ID、一个目的URI、一组断言工厂、一组Filter组成。如果断言为真，则说明请求的URL和配置的路由匹配。")]),t._v(" "),a("h2",{attrs:{id:"断言-predicates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#断言-predicates"}},[t._v("#")]),t._v(" 断言(predicates)")]),t._v(" "),a("p",[t._v("Java8中的断言函数，SpringCloud Gateway中的断言函数类型是Spring5.0框架中的ServerWebExchange。断言函数允许开发者去定义匹配Http request中的任何信息，比如请求头和参数等。")]),t._v(" "),a("h2",{attrs:{id:"过滤器-filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器-filter"}},[t._v("#")]),t._v(" 过滤器（Filter)")]),t._v(" "),a("p",[t._v("分为Gateway FilIer和Global Filter。Filter可以对请求和响应进行处理。")]),t._v(" "),a("h1",{attrs:{id:"工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[t._v("#")]),t._v(" 工作原理")]),t._v(" "),a("p",[t._v("跟 Zuul 的差不多，最大的区别就是 Gateway 的 Filter 只有 pre 和 post 两种。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190703211815129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RocXR6cQ==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("客户端向 Spring Cloud Gateway 发出请求，如果请求与网关程序定义的路由匹配，则该请求就会被发送到网关 Web 处理程序，此时处理程序运行特定的请求过滤器链。\n过滤器之间用虚线分开的原因是过滤器可能会在发送代理请求的前后执行逻辑。所有 pre 过滤器逻辑先执行，然后执行代理请求；代理请求完成后，执行 post 过滤器逻辑。")]),t._v(" "),a("h1",{attrs:{id:"环境搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),a("ul",[a("li",[t._v("引入依赖")]),t._v(" "),a("li",[t._v("编写yml配置文件")])]),t._v(" "),a("h1",{attrs:{id:"路由断言工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由断言工厂"}},[t._v("#")]),t._v(" 路由断言工厂")]),t._v(" "),a("p",[t._v("是否允许往下调用，否则报404")]),t._v(" "),a("p",[t._v("Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础设施的一部分。Spring Cloud Gateway包含许多内置的路由谓词工厂。所有这些谓词都匹配HTTP请求的不同属性。可以将多个路由谓词工厂与逻辑and语句结合起来。")]),t._v(" "),a("h2",{attrs:{id:"时间匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间匹配"}},[t._v("#")]),t._v(" 时间匹配")]),t._v(" "),a("p",[t._v("用在限时抢购的一些场景中")]),t._v(" "),a("h2",{attrs:{id:"cookie匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie匹配"}},[t._v("#")]),t._v(" Cookie匹配")]),t._v(" "),a("h2",{attrs:{id:"header匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#header匹配"}},[t._v("#")]),t._v(" Header匹配")]),t._v(" "),a("h2",{attrs:{id:"路径匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路径匹配"}},[t._v("#")]),t._v(" 路径匹配")]),t._v(" "),a("h2",{attrs:{id:"自定义路由断言工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义路由断言工厂"}},[t._v("#")]),t._v(" 自定义路由断言工厂")]),t._v(" "),a("ul",[a("li",[t._v("继承 AbstractRoutePredicateFactory 类，并交给spring管理")]),t._v(" "),a("li",[a("strong",[t._v("注意: 命名需要以 RoutePredicateFactory 结尾，比如CheckAuthRoutePredicateFactory，这是个坑哟..")])]),t._v(" "),a("li",[t._v("在yml使用就是类名前面的"),a("strong",[t._v("CheckAuth")])])]),t._v(" "),a("h1",{attrs:{id:"过滤器工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器工厂"}},[t._v("#")]),t._v(" 过滤器工厂")]),t._v(" "),a("p",[t._v("内置了很多的过滤器工厂，我们通过一些过滤器工厂可以进行一些业务逻辑处理器，比如添加剔除响应头，添加去除参数等")]),t._v(" "),a("h2",{attrs:{id:"添加请求头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加请求头"}},[t._v("#")]),t._v(" 添加请求头")]),t._v(" "),a("h2",{attrs:{id:"添加请求参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加请求参数"}},[t._v("#")]),t._v(" 添加请求参数")]),t._v(" "),a("h2",{attrs:{id:"为匹配的路由统一添加前缀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为匹配的路由统一添加前缀"}},[t._v("#")]),t._v(" 为匹配的路由统一添加前缀")]),t._v(" "),a("h2",{attrs:{id:"重定向操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重定向操作"}},[t._v("#")]),t._v(" 重定向操作")]),t._v(" "),a("h2",{attrs:{id:"自定义过滤器工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义过滤器工厂"}},[t._v("#")]),t._v(" 自定义过滤器工厂")]),t._v(" "),a("ul",[a("li",[t._v("继承AbstractNameValueGatewayFilterFactory")]),t._v(" "),a("li",[t._v("名称必须要以GatewayFilterFactory结尾并交给spring管理,比如:CheckAuthGatewayFilterFactory")]),t._v(" "),a("li",[t._v("在yml使用就是类名前面的"),a("strong",[t._v("CheckAuth")])])]),t._v(" "),a("h1",{attrs:{id:"全局过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局过滤器"}},[t._v("#")]),t._v(" 全局过滤器")]),t._v(" "),a("p",[t._v("GlobalFilter 接口和 GatewayFilter 有一样的接口定义，只不过， GlobalFilter 会作用于所有路由。")]),t._v(" "),a("p",[t._v("**官方声明：**GlobalFilter的接口定义以及用法在未来的版本可能会发生变化。最好不用使用.")]),t._v(" "),a("h2",{attrs:{id:"loadbalancerclientfilter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loadbalancerclientfilter"}},[t._v("#")]),t._v(" LoadBalancerClientFilter")]),t._v(" "),a("p",[t._v("整合负载均衡器Ribbon")]),t._v(" "),a("p",[t._v("如果该值的scheme是 lb，比如：lb://myservice ，它将会使用Spring Cloud的LoadBalancerClient 来将 myservice 解析成实际的host和port，并替换掉 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 的内容。")]),t._v(" "),a("h2",{attrs:{id:"自定义全局过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义全局过滤器"}},[t._v("#")]),t._v(" 自定义全局过滤器")]),t._v(" "),a("ul",[a("li",[t._v("实现GlobalFilter ，并交给spring管理.")])]),t._v(" "),a("h1",{attrs:{id:"跨域配置cors-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域配置cors-configuration"}},[t._v("#")]),t._v(" 跨域配置CORS Configuration")]),t._v(" "),a("p",[t._v("#255的bug.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CorsWebFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("corsFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CorsConfiguration")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CorsConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAllowedMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAllowedOrigin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAllowedHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UrlBasedCorsConfigurationSource")]),t._v(" source "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UrlBasedCorsConfigurationSource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PathPatternParser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerCorsConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/**"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CorsWebFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("h1",{attrs:{id:"gateway整合sentinel限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gateway整合sentinel限流"}},[t._v("#")]),t._v(" gateway整合sentinel限流")]),t._v(" "),a("ul",[a("li",[t._v("引入sentinel-spring-cloud-gateway-adapter")]),t._v(" "),a("li",[t._v("yml配置")]),t._v(" "),a("li",[t._v("构造SentinelGatewayFilter")]),t._v(" "),a("li",[t._v("配置加载网关规则")])]),t._v(" "),a("h1",{attrs:{id:"网关高可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网关高可用"}},[t._v("#")]),t._v(" 网关高可用")]),t._v(" "),a("p",[t._v("为了保证 Gateway 的高可用性，可以同时启动多个 Gateway 实例进行负载，在 Gateway 的上游使用 Nginx 或者 F5 进行负载转发以达到高可用。")]),t._v(" "),a("h1",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/thqtzq/article/details/94590287",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Cloud Gateway的工作原理"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/Day_Day_No_Bug/article/details/107382255",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringCloudGateway内存泄漏问题"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("两个redis的依赖，不一样。 移除了就好了。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/atliwen/p/14922388.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("spring-cloud-gateway2.0 内存泄露问题排查"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("getaway 2.0 使用的是 netty 做为容器， 在引入 spring-boot-starter-web 组件的时候会引入 tomcat 容器。")]),t._v(" "),a("li",[t._v("tomcat 内对象也被创建了，在响应的时候，照成了netty 与 tomcat 类相关使用的问题。")]),t._v(" "),a("li",[t._v("从内存快照中其实也可以看到的，当时并未特别注意。")]),t._v(" "),a("li",[t._v("排除 spring-boot-starter-web 的 tomcat 相关依赖引用就ok了")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);