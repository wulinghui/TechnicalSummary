(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{485:function(v,_,a){"use strict";a.r(_);var t=a(7),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"计算机组成原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#计算机组成原理"}},[v._v("#")]),v._v(" 计算机组成原理")]),v._v(" "),_("h2",{attrs:{id:"冯诺依曼计算机模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#冯诺依曼计算机模型"}},[v._v("#")]),v._v(" 冯诺依曼计算机模型")]),v._v(" "),_("h3",{attrs:{id:"计算机五大核心"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#计算机五大核心"}},[v._v("#")]),v._v(" 计算机五大核心")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("控制器(Control)")])]),v._v(" "),_("li",[_("p",[v._v("运算器(Datapath)")])]),v._v(" "),_("li",[_("p",[v._v("存储器(Memory)")])]),v._v(" "),_("li",[_("p",[v._v("输入(Input system)")])]),v._v(" "),_("li",[_("p",[v._v("输出(Output system)")])])]),v._v(" "),_("h3",{attrs:{id:"cpu指令结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cpu指令结构"}},[v._v("#")]),v._v(" CPU指令结构")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("控制单元")])]),v._v(" "),_("li",[_("p",[v._v("运算单元")])]),v._v(" "),_("li",[_("p",[v._v("数据(存储)单元")])])]),v._v(" "),_("h3",{attrs:{id:"cpu缓存结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cpu缓存结构"}},[v._v("#")]),v._v(" CPU缓存结构")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("CPU读取存储器数据过程")])]),v._v(" "),_("li",[_("p",[v._v("CPU为何要有高速缓存")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("内存和硬盘的发展速度远远不及 CPU")]),v._v(" "),_("li",[_("strong",[v._v("空间局部性")]),v._v(" 、"),_("strong",[v._v("时间局部性")])])])]),v._v(" "),_("li",[_("p",[v._v("带有高速缓存的CPU执行计算的流程")])])]),v._v(" "),_("h3",{attrs:{id:"cpu运行安全等级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cpu运行安全等级"}},[v._v("#")]),v._v(" CPU运行安全等级")]),v._v(" "),_("h2",{attrs:{id:"cpu缓存架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cpu缓存架构"}},[v._v("#")]),v._v(" CPU缓存架构")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("CPU为何要有高速缓存")])]),v._v(" "),_("li",[_("ul",[_("li",[_("p",[v._v("原因")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("时间局部性（Temporal Locality）")]),v._v(" "),_("li",[v._v("空间局部性（Spatial Locality）")])])]),v._v(" "),_("li",[_("p",[v._v("带有高速缓存的CPU执行计算的流程")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("程序以及数据被加载到主内存")]),v._v(" "),_("li",[v._v("指令和数据被加载到CPU的高速缓存")]),v._v(" "),_("li",[v._v("CPU执行指令，把结果写到高速缓存")]),v._v(" "),_("li",[v._v("高速缓存中的数据写回主内存")])])]),v._v(" "),_("li",[_("p",[v._v("目前流行的多级缓存结构")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("3级缓存")])])])])])]),v._v(" "),_("h2",{attrs:{id:"cpu缓存一致性协议详解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cpu缓存一致性协议详解"}},[v._v("#")]),v._v(" CPU缓存一致性协议详解")]),v._v(" "),_("h3",{attrs:{id:"cpu高速缓存-cache-memory"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cpu高速缓存-cache-memory"}},[v._v("#")]),v._v(" CPU高速缓存（Cache Memory）")]),v._v(" "),_("h4",{attrs:{id:"cpu为何要有高速缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cpu为何要有高速缓存"}},[v._v("#")]),v._v(" CPU为何要有高速缓存")]),v._v(" "),_("ul",[_("li",[v._v("时间局部性（Temporal Locality）")]),v._v(" "),_("li",[v._v("空间局部性（Spatial Locality）")]),v._v(" "),_("li",[v._v("内存和硬盘的发展速度远远不及 CPU,不能依赖他们就只能依赖自己的缓存了。")])]),v._v(" "),_("h4",{attrs:{id:"带有高速缓存的cpu执行计算的流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#带有高速缓存的cpu执行计算的流程"}},[v._v("#")]),v._v(" 带有高速缓存的CPU执行计算的流程")]),v._v(" "),_("ul",[_("li",[v._v("程序以及数据被加载到主内存")]),v._v(" "),_("li",[v._v("指令和数据被加载到CPU的高速缓存")]),v._v(" "),_("li",[v._v("CPU执行指令")]),v._v(" "),_("li",[v._v("再把结果写到高速缓存")]),v._v(" "),_("li",[v._v("高速缓存中的数据写回主内存")])]),v._v(" "),_("h4",{attrs:{id:"目前流行的多级缓存结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#目前流行的多级缓存结构"}},[v._v("#")]),v._v(" 目前流行的多级缓存结构")]),v._v(" "),_("ul",[_("li",[v._v("3级缓存")]),v._v(" "),_("li",[v._v("2级缓存")])]),v._v(" "),_("h3",{attrs:{id:"多核cpu多级缓存一致性协议mesi"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多核cpu多级缓存一致性协议mesi"}},[v._v("#")]),v._v(" 多核CPU多级缓存一致性协议MESI")]),v._v(" "),_("p",[v._v("多核CPU的情况下有多个一级缓存，如何保证缓存内部数据的一致,不让系统数据混乱。")]),v._v(" "),_("h4",{attrs:{id:"mesi协议缓存状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mesi协议缓存状态"}},[v._v("#")]),v._v(" MESI协议缓存状态")]),v._v(" "),_("ul",[_("li",[v._v("M 修改 (Modified)")]),v._v(" "),_("li",[v._v("E 独享、互斥 (Exclusive)")]),v._v(" "),_("li",[v._v("S 共享 (Shared)")]),v._v(" "),_("li",[v._v("I 无效 (Invalid)")])]),v._v(" "),_("h4",{attrs:{id:"mesi状态转换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mesi状态转换"}},[v._v("#")]),v._v(" MESI状态转换")]),v._v(" "),_("ul",[_("li",[v._v("E -> S -> I")]),v._v(" "),_("li",[v._v("S -> M")])]),v._v(" "),_("h4",{attrs:{id:"多核缓存协同操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多核缓存协同操作"}},[v._v("#")]),v._v(" 多核缓存协同操作")]),v._v(" "),_("p",[v._v("同一时刻交给总线裁决")]),v._v(" "),_("h4",{attrs:{id:"单核读取"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单核读取"}},[v._v("#")]),v._v(" 单核读取")]),v._v(" "),_("p",[v._v("独享")]),v._v(" "),_("h4",{attrs:{id:"双核读取"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#双核读取"}},[v._v("#")]),v._v(" 双核读取")]),v._v(" "),_("p",[v._v("A/B都是S状态(共享)")]),v._v(" "),_("h4",{attrs:{id:"修改数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#修改数据"}},[v._v("#")]),v._v(" 修改数据")]),v._v(" "),_("p",[v._v("A为M，B为I")]),v._v(" "),_("h4",{attrs:{id:"同步数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同步数据"}},[v._v("#")]),v._v(" 同步数据")]),v._v(" "),_("ul",[_("li",[v._v("A从 M -> E -> S")]),v._v(" "),_("li",[v._v("B 从 I -> S")]),v._v(" "),_("li",[v._v("循环上面的读取操作")])]),v._v(" "),_("h3",{attrs:{id:"缓存行伪共享"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存行伪共享"}},[v._v("#")]),v._v(" 缓存行伪共享")]),v._v(" "),_("p",[v._v("如果需要修改“共享同一个缓存行的变量” （64byte），就会无意中影响彼此的性能，这就是伪共享（False Sharing）")]),v._v(" "),_("h4",{attrs:{id:"怎么解决伪共享"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#怎么解决伪共享"}},[v._v("#")]),v._v(" "),_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/187593289",target:"_blank",rel:"noopener noreferrer"}},[v._v("怎么解决伪共享"),_("OutboundLink")],1)]),v._v(" "),_("ul",[_("li",[v._v("手动填充.")]),v._v(" "),_("li",[v._v("Java8中新增了一个注解：@sun.misc.Contended 加上这个注解的类会自动补齐缓存行，需要注意的是此注解默认是无效的，需要在jvm启动时设置 -XX:-RestrictContended 才会生效。")])]),v._v(" "),_("h3",{attrs:{id:"mesi优化和他们引入的问题-只能用其他更好的协议去优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mesi优化和他们引入的问题-只能用其他更好的协议去优化"}},[v._v("#")]),v._v(" MESI优化和他们引入的问题(只能用其他更好的协议去优化)")]),v._v(" "),_("ul",[_("li",[_("ul",[_("li",[_("p",[v._v("CPU切换状态阻塞解决-存储缓存（Store Bufferes）")])]),v._v(" "),_("li",[_("ul",[_("li",[_("p",[v._v("修改本地缓存中的一条信息，那么你必须将I（无效）状态通知到其他拥有该缓存数据的CPU缓存中，并且等待确认。等待确认的过程会阻塞处理器，这会降低处理器的性能。")])]),v._v(" "),_("li",[_("p",[v._v("Store Bufferes")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("处理器把它想要写入到主存的值写到缓存，然后继续去处理其他事情。当所有失效确认（Invalidate Acknowledge）都接收到时，数据才会最终被提交。")])])]),v._v(" "),_("li",[_("p",[v._v("Store Bufferes的风险")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("就是处理器会尝试从存储缓存中读取值，但它还没有进行提交")]),v._v(" "),_("li",[v._v("保存什么时候会完成，这个并没有任何保证")])])]),v._v(" "),_("li",[_("p",[v._v("硬件内存模型")])])])]),v._v(" "),_("li",[_("p",[v._v("缓存的一致性消息传递是要时间的，这就使其切换时会产生延迟。当一个缓存被切换状态时其他缓存收到消息完成各自的切换并且发出回应消息这么一长串的时间中CPU都会等待所有缓存响应完成。可能出现的阻塞都会导致各种各样的性能问题和稳定性问题。")])])])])]),v._v(" "),_("h1",{attrs:{id:"操作系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[v._v("#")]),v._v(" 操作系统")]),v._v(" "),_("h2",{attrs:{id:"执行空间保护"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#执行空间保护"}},[v._v("#")]),v._v(" 执行空间保护")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("内核线程模型(KLT)")])]),v._v(" "),_("li",[_("p",[v._v("用户线程模型(ULT)")])])]),v._v(" "),_("h2",{attrs:{id:"进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[v._v("#")]),v._v(" 进程")]),v._v(" "),_("ul",[_("li",[v._v("栈指令集架构")]),v._v(" "),_("li",[v._v("寄存器指令集架构")])]),v._v(" "),_("h3",{attrs:{id:"进程间通信的方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信的方式"}},[v._v("#")]),v._v(" 进程间通信的方式")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("管道（pipe）及有名管道（named pipe）")]),v._v("：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。")]),v._v(" "),_("li",[_("strong",[v._v("信号（signal）")]),v._v("：信号是在软件层次上对中断机制的一种模拟，它是比较复杂的通信方式，用于通知进程有某事件发生，一个进程收到一个信号与处理器收到一个中断请求效果上可以说是一致的。")]),v._v(" "),_("li",[_("strong",[v._v("消息队列（message queue）")]),v._v("：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息。")]),v._v(" "),_("li",[_("strong",[v._v("共享内存（shared memory）")]),v._v("：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。")]),v._v(" "),_("li",[_("strong",[v._v("信号量（semaphore）")]),v._v("：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段。")]),v._v(" "),_("li",[_("strong",[v._v("套接字（socket）")]),v._v("：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。")])]),v._v(" "),_("h2",{attrs:{id:"线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[v._v("#")]),v._v(" 线程")]),v._v(" "),_("h3",{attrs:{id:"进程与线程的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程的区别"}},[v._v("#")]),v._v(" 进程与线程的区别")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("进程基本上相互独立的，而线程存在于进程内，是进程的一个子集")])]),v._v(" "),_("li",[_("p",[v._v("进程拥有共享的资源，如内存空间等，供其内部的线程共享")])]),v._v(" "),_("li",[_("p",[v._v("进程间通信较为复杂")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("同一台计算机的进程通信称为 IPC（Inter-process communication）")]),v._v(" "),_("li",[v._v("不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP")])])]),v._v(" "),_("li",[_("p",[v._v("线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量")])]),v._v(" "),_("li",[_("p",[v._v("线程更轻量，线程上下文切换成本一般上要比进程上下文切换低")])])]),v._v(" "),_("h3",{attrs:{id:"线程间通信协议-管程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程间通信协议-管程"}},[v._v("#")]),v._v(" 线程间通信协议 ： 管程")]),v._v(" "),_("ol",[_("li",[v._v("管程是指管理共享变量以及对共享变量操作的过程，让它们支持并发。")]),v._v(" "),_("li",[v._v("在管程的发展史上，先后出现过三种不同的管程模型，分别是Hasen模型、Hoare模型和MESA模型。现在正在广泛使用的是MESA模型。")]),v._v(" "),_("li",[v._v("MESA管程模型， 也是java中的synchronized和AQS的设计思想。")])]),v._v(" "),_("h3",{attrs:{id:"线程的同步互斥"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程的同步互斥"}},[v._v("#")]),v._v(" 线程的同步互斥")]),v._v(" "),_("p",[_("strong",[v._v("线程同步")]),v._v("是指线程之间所具有的一种制约关系，一个线程的执行依赖另一个线程的消息，当它没有得到另一个线程的消息时应等待，直到消息到达时才被唤醒。")]),v._v(" "),_("p",[_("strong",[v._v("线程互斥")]),v._v("是指对于共享的进程系统资源，在各单个线程访问时的排它性。当有若干个线程都要使用某一共享资源时，任何时刻最多只允许一个线程去使用，其它要使用该资源的线程必须等待，直到占用资源者释放该资源。线程互斥可以看成是一种特殊的线程同步。")]),v._v(" "),_("p",[_("strong",[v._v("四种线程同步互斥的控制方法")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("临界区")]),v._v(":通过对多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问。（在一段时间内只允许一个线程访问的资源就称为临界资源）。")]),v._v(" "),_("li",[_("strong",[v._v("互斥量")]),v._v(":为协调共同对一个共享资源的单独访问而设计的。")]),v._v(" "),_("li",[_("strong",[v._v("信号量")]),v._v(":为控制一个具有有限数量用户资源而设计。")]),v._v(" "),_("li",[_("strong",[v._v("事件")]),v._v(":用来通知线程有一些事件已发生，从而启动后继任务的开始。")])]),v._v(" "),_("h3",{attrs:{id:"操作系统层面线程生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作系统层面线程生命周期"}},[v._v("#")]),v._v(" 操作系统层面线程生命周期")]),v._v(" "),_("p",[v._v("操作系统层面的线程生命周期基本上可以用下图这个“五态模型”来描述。这五态分别：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("初始状态，指的是线程已经被创建，但是还不允许分配 CPU 执行。这个状态属于编程语言特有的，不过这里所谓的被创建，仅仅是在编程语言层面被创建，而在操作系统层面，真正的线程还没有创建。")])]),v._v(" "),_("li",[_("p",[v._v("可运行状态，指的是线程可以分配 CPU 执行。在这种状态下，真正的操作系统线程已经被成功创建了，所以可以分配 CPU 执行。")])]),v._v(" "),_("li",[_("p",[v._v("运行状态: 当有空闲的 CPU 时，操作系统会将其分配给一个处于可运行状态的线程，被分配到 CPU 的线程的状态就转换成了运行状态。")])]),v._v(" "),_("li",[_("p",[v._v("休眠状态: 运行状态的线程如果调用一个阻塞的 API（例如以阻塞方式读文件）或者等待某个事件（例如条件变量），那么线程的状态就会转换到休眠状态，同时释放 CPU 使用权，休眠状态的线程永远没有机会获得 CPU 使用权。当等待的事件出现了，线程就会从休眠状态转换到可运行状态。")])]),v._v(" "),_("li",[_("p",[v._v("终止状态: 线程执行完或者出现异常就会进入终止状态，终止状态的线程不会切换到其他任何状态，进入终止状态也就意味着线程的生命周期结束了。")]),v._v(" "),_("p",[v._v("这五种状态在不同编程语言里会有简化合并。Java 语言里则把可运行状态和运行状态合并了，这两个状态在操作系统调度层面有用，而 JVM 层面不关心这两个状态，因为 JVM 把线程调度交给操作系统处理了。")])])]),v._v(" "),_("h2",{attrs:{id:"查看进程线程的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#查看进程线程的方法"}},[v._v("#")]),v._v(" 查看进程线程的方法")]),v._v(" "),_("h3",{attrs:{id:"windows"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[v._v("#")]),v._v(" windows")]),v._v(" "),_("ul",[_("li",[v._v("任务管理器可以查看进程和线程数，也可以用来杀死进程")]),v._v(" "),_("li",[v._v("tasklist 查看进程")]),v._v(" "),_("li",[v._v("taskkill 杀死进程")])]),v._v(" "),_("h3",{attrs:{id:"linux"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[v._v("#")]),v._v(" linux")]),v._v(" "),_("ul",[_("li",[v._v("ps -fe 查看所有进程")]),v._v(" "),_("li",[v._v("ps -fT -p  查看某个进程（PID）的所有线程")]),v._v(" "),_("li",[v._v("kill 杀死进程")]),v._v(" "),_("li",[v._v("top 按大写 H 切换是否显示线程")]),v._v(" "),_("li",[v._v("top -H -p  查看某个进程（PID）的所有线程")])]),v._v(" "),_("h3",{attrs:{id:"java"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[v._v("#")]),v._v(" Java")]),v._v(" "),_("ul",[_("li",[v._v("jps 命令查看所有 Java 进程")]),v._v(" "),_("li",[v._v("jstack  查看某个 Java 进程（PID）的所有线程状态")]),v._v(" "),_("li",[v._v("jconsole 来查看某个 Java 进程中线程的运行情况（图形界面）")])]),v._v(" "),_("h2",{attrs:{id:"上下文切换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#上下文切换"}},[v._v("#")]),v._v(" 上下文切换")]),v._v(" "),_("p",[v._v("上下文切换是指CPU(中央处理单元)从一个进程或线程到另一个进程或线程的切换。")]),v._v(" "),_("p",[_("strong",[v._v("上下文切换只能在内核模式下发生")]),v._v("。内核模式是CPU的特权模式，其中只有内核运行，并提供对所有内存位置和所有其他系统资源的访问。其他程序(包括应用程序)最初在用户模式下运行，但它们可以通过系统调用运行部分内核代码。")]),v._v(" "),_("p",[v._v("linux系统 相关指令 :")]),v._v(" "),_("p",[_("code",[v._v("vmstat 1")])]),v._v(" "),_("p",[_("code",[v._v("pidstat")])]),v._v(" "),_("h2",{attrs:{id:"协程-纤程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协程-纤程"}},[v._v("#")]),v._v(" 协程（纤程）")]),v._v(" "),_("p",[v._v("用户级线程ULT")]),v._v(" "),_("p",[v._v("协程的特点在于是一个线程执行，那和多线程比，协程有何优势？")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("线程的切换由操作系统调度，协程由用户自己进行调度，因此减少了上下文切换，提高了效率。")])]),v._v(" "),_("li",[_("p",[v._v("线程的默认stack大小是1M，而协程更轻量，接近1k。因此可以在相同的内存中开启更多的协程。")])]),v._v(" "),_("li",[_("p",[v._v("不需要多线程的锁机制：因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。")])])]),v._v(" "),_("p",[v._v("注意： 协程适用于被阻塞的，且需要大量并发的场景（网络io）。不适合大量计算的场景。")]),v._v(" "),_("h2",{attrs:{id:"字节问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#字节问题"}},[v._v("#")]),v._v(" 字节问题")]),v._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://baijiahao.baidu.com/s?id=1717653429356651359&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"}},[v._v("byte和bit的区别"),_("OutboundLink")],1)])]),v._v(" "),_("blockquote",[_("p",[v._v("bit字 就是一个2进制位；  一字节 byte = 8 bit;   字节是基础单位")])]),v._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://blog.csdn.net/AlpinistWang/article/details/87994617",target:"_blank",rel:"noopener noreferrer"}},[v._v("为什么Java中int型数据取值范围是[-2^{31}, 2^{31}-1]"),_("OutboundLink")],1)])]),v._v(" "),_("blockquote",[_("p",[v._v("int 占4字节 ;  4 * 8 = 32位  ； 一个符号位标识 所以是31 ； 因为有个0 所以正数还得减一。")])])])}),[],!1,null,null,null);_.default=s.exports}}]);