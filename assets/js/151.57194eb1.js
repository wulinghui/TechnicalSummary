(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{511:function(r,a,s){"use strict";s.r(a);var t=s(7),i=Object(t.a)({},(function(){var r=this,a=r._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h1",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[r._v("#")]),r._v(" 背景")]),r._v(" "),a("p",[r._v("这里收集"),a("a",{attrs:{href:"https://spring.io",target:"_blank",rel:"noopener noreferrer"}},[r._v("官网"),a("OutboundLink")],1),r._v("各个项目的介绍和作用说明。")]),r._v(" "),a("h1",{attrs:{id:"spring-boot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot"}},[r._v("#")]),r._v(" spring-boot")]),r._v(" "),a("h1",{attrs:{id:"spring-framework"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-framework"}},[r._v("#")]),r._v(" Spring Framework")]),r._v(" "),a("h1",{attrs:{id:"spring-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data"}},[r._v("#")]),r._v(" Spring Data")]),r._v(" "),a("h2",{attrs:{id:"spring-data-jdbc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-jdbc"}},[r._v("#")]),r._v(" Spring Data JDBC")]),r._v(" "),a("h2",{attrs:{id:"spring-data-jpa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-jpa"}},[r._v("#")]),r._v(" Spring Data JPA")]),r._v(" "),a("h2",{attrs:{id:"spring-data-ldap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-ldap"}},[r._v("#")]),r._v(" Spring Data LDAP")]),r._v(" "),a("h2",{attrs:{id:"spring-data-mongodb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-mongodb"}},[r._v("#")]),r._v(" Spring Data MongoDB")]),r._v(" "),a("h2",{attrs:{id:"spring-data-redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-redis"}},[r._v("#")]),r._v(" Spring Data Redis")]),r._v(" "),a("h2",{attrs:{id:"spring-data-r2dbc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-r2dbc"}},[r._v("#")]),r._v(" Spring Data R2DBC")]),r._v(" "),a("p",[r._v("关系数据库连接，这是一种使用反应式驱动程序集成SQL数据库的规范。")]),r._v(" "),a("h2",{attrs:{id:"spring-data-rest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-rest"}},[r._v("#")]),r._v(" Spring Data REST")]),r._v(" "),a("p",[r._v("构建超媒体驱动的REST web服务变得容易。")]),r._v(" "),a("h2",{attrs:{id:"spring-data-for-apache-cassandra"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-for-apache-cassandra"}},[r._v("#")]),r._v(" Spring Data for Apache Cassandra")]),r._v(" "),a("p",[r._v("分布式NoSQL数据库系统,设计用于处理大量数据跨许多商品服务器,提供高可用性、无单点故障和线性扩展性能")]),r._v(" "),a("h2",{attrs:{id:"spring-data-for-apache-geode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-for-apache-geode"}},[r._v("#")]),r._v(" Spring Data for Apache Geode")]),r._v(" "),a("p",[r._v("VMware GemFire 的前身")]),r._v(" "),a("h2",{attrs:{id:"spring-data-for-vmware-gemfire"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-for-vmware-gemfire"}},[r._v("#")]),r._v(" Spring Data for VMware GemFire")]),r._v(" "),a("p",[r._v("VMware GemFire进行分布式数据管理")]),r._v(" "),a("h2",{attrs:{id:"spring-data-couchbase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-couchbase"}},[r._v("#")]),r._v(" Spring Data Couchbase")]),r._v(" "),a("p",[r._v("Couchbase是高性能，高伸缩性和高可用的分布式缓存系统；Redis是一个开源的内存数据结构存储系统。")]),r._v(" "),a("h2",{attrs:{id:"spring-data-elasticsearch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-elasticsearch"}},[r._v("#")]),r._v(" Spring Data Elasticsearch")]),r._v(" "),a("h2",{attrs:{id:"spring-data-envers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-envers"}},[r._v("#")]),r._v(" Spring Data Envers")]),r._v(" "),a("p",[r._v("允许访问Hibernate Envers管理的实体修订。")]),r._v(" "),a("h2",{attrs:{id:"spring-data-neo4j"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-neo4j"}},[r._v("#")]),r._v(" Spring Data Neo4j")]),r._v(" "),a("p",[r._v("Neo4j图数据库。")]),r._v(" "),a("h1",{attrs:{id:"spring-cloud"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud"}},[r._v("#")]),r._v(" Spring Cloud")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-azure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-azure"}},[r._v("#")]),r._v(" Spring Cloud Azure")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-alibaba"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-alibaba"}},[r._v("#")]),r._v(" Spring Cloud Alibaba")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-for-amazon-web-services"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-for-amazon-web-services"}},[r._v("#")]),r._v(" Spring Cloud for Amazon Web Services")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-bus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-bus"}},[r._v("#")]),r._v(" Spring Cloud Bus")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-circuit-breaker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-circuit-breaker"}},[r._v("#")]),r._v(" Spring Cloud Circuit Breaker")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-cli"}},[r._v("#")]),r._v(" Spring Cloud CLI")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-cloud-foundry-service-broker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-cloud-foundry-service-broker"}},[r._v("#")]),r._v(" Spring Cloud - Cloud Foundry Service Broker")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-commons"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-commons"}},[r._v("#")]),r._v(" Spring Cloud Commons")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-config"}},[r._v("#")]),r._v(" Spring Cloud Config")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-consul"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-consul"}},[r._v("#")]),r._v(" Spring Cloud Consul")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-contract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-contract"}},[r._v("#")]),r._v(" Spring Cloud Contract")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-function"}},[r._v("#")]),r._v(" Spring Cloud Function")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-gateway"}},[r._v("#")]),r._v(" Spring Cloud Gateway")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-gcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-gcp"}},[r._v("#")]),r._v(" Spring Cloud GCP")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-kubernetes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-kubernetes"}},[r._v("#")]),r._v(" Spring Cloud Kubernetes")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-netflix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-netflix"}},[r._v("#")]),r._v(" Spring Cloud Netflix")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-open-service-broker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-open-service-broker"}},[r._v("#")]),r._v(" Spring Cloud Open Service Broker")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-openfeign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-openfeign"}},[r._v("#")]),r._v(" Spring Cloud OpenFeign")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-security"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-security"}},[r._v("#")]),r._v(" Spring Cloud Security")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-skipper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-skipper"}},[r._v("#")]),r._v(" Spring Cloud Skipper")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-sleuth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-sleuth"}},[r._v("#")]),r._v(" Spring Cloud Sleuth")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-stream"}},[r._v("#")]),r._v(" Spring Cloud Stream")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-stream-applications"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-stream-applications"}},[r._v("#")]),r._v(" Spring Cloud Stream Applications")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-task"}},[r._v("#")]),r._v(" Spring Cloud Task")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-vault"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-vault"}},[r._v("#")]),r._v(" Spring Cloud Vault")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-zookeeper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-zookeeper"}},[r._v("#")]),r._v(" Spring Cloud Zookeeper")]),r._v(" "),a("h2",{attrs:{id:"spring-cloud-app-broker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-app-broker"}},[r._v("#")]),r._v(" Spring Cloud App Broker")]),r._v(" "),a("h1",{attrs:{id:"spring-cloud-data-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-data-flow"}},[r._v("#")]),r._v(" Spring Cloud Data Flow")]),r._v(" "),a("p",[r._v("为现代运行时的可组合数据微服务应用程序提供编排服务。"),a("br"),r._v("\n用于Cloud Foundry和Kubernetes的基于微服务的流式处理和批处理数据。"),a("br"),r._v("\n支持一系列数据处理用例，从ETL到导入/导出、事件流和预测分析。")]),r._v(" "),a("h1",{attrs:{id:"spring-security"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-security"}},[r._v("#")]),r._v(" Spring Security")]),r._v(" "),a("p",[r._v("通过全面且可扩展的身份验证和授权支持保护您的应用程序。")]),r._v(" "),a("h2",{attrs:{id:"spring-security-kerberos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-security-kerberos"}},[r._v("#")]),r._v(" Spring Security Kerberos")]),r._v(" "),a("p",[r._v("Kerberos 是一种网络身份验证协议，它通过为用户提供一次性密码以确保安全登录。"),a("br"),r._v("\n该协议能够防止中间人攻击和窃听，并且可以用于保护各种类型的网络通信。"),a("br"),r._v("\n它可以用于以下场景：")]),r._v(" "),a("ul",[a("li",[r._v("单点登录 (SSO)：允许用户在一个域内只需登录一次即可访问多个受保护的资源。")]),r._v(" "),a("li",[r._v("基于角色的权限控制：根据用户的 Kerberos 凭证来决定他们是否具有访问特定资源的权限。")]),r._v(" "),a("li",[r._v("集成 Windows 域：与 Microsoft Active Directory 等 Windows 域服务器进行集成，以便使用 Kerberos 进行身份验证。")])]),r._v(" "),a("h1",{attrs:{id:"spring-authorization-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-authorization-server"}},[r._v("#")]),r._v(" Spring Authorization Server")]),r._v(" "),a("p",[r._v("为构建OpenID Connect 1.0身份提供程序和OAuth2授权服务器产品提供了一个安全、轻量级和可自定义的基础。 单独从 Spring Security auth模块出来。")]),r._v(" "),a("h1",{attrs:{id:"spring-for-graphql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-for-graphql"}},[r._v("#")]),r._v(" Spring for GraphQL")]),r._v(" "),a("p",[r._v("Spring for GraphQL为基于GraphQLJava构建的Spring应用程序提供支持。")]),r._v(" "),a("h1",{attrs:{id:"spring-session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-session"}},[r._v("#")]),r._v(" Spring Session")]),r._v(" "),a("p",[r._v("提供用于管理用户会话信息的API和实现。 可自定义分布式session。还有WebSocket，HttpSession，WebSession")]),r._v(" "),a("h1",{attrs:{id:"spring-integration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-integration"}},[r._v("#")]),r._v(" Spring Integration")]),r._v(" "),a("p",[r._v("通过轻量级消息传递和声明性适配器支持众所周知的企业集成模式。"),a("br"),r._v("\nSpring Cloud Stream项目建立在Spring Integration之上，其中Spring Integration被用作消息驱动微服务的引擎。")]),r._v(" "),a("h1",{attrs:{id:"spring-hateoas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-hateoas"}},[r._v("#")]),r._v(" Spring HATEOAS")]),r._v(" "),a("p",[r._v("简化了创建遵循HATEOAS原则的REST表示。"),a("br"),r._v("\n带有self的下一个接口引用地址，如github的api。")]),r._v(" "),a("h1",{attrs:{id:"spring-modulith"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-modulith"}},[r._v("#")]),r._v(" Spring Modulith")]),r._v(" "),a("p",[r._v("允许开发人员构建结构良好的Spring Boot应用程序，并指导开发人员查找和使用由域驱动的应用程序模块。"),a("br"),r._v("\nDDD模式开发的模版。 强制定义啦一些规范。")]),r._v(" "),a("h1",{attrs:{id:"spring-rest-docs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-rest-docs"}},[r._v("#")]),r._v(" Spring REST Docs")]),r._v(" "),a("p",[r._v("通过将手工编写的文档与使用Spring MVC Test或REST Assured生成的自动生成的片段相结合，可以对RESTful服务进行文档化。\n对于测试要求严格的可以使用这个来做文档编辑。\n"),a("a",{attrs:{href:"https://www.cnblogs.com/Chary/p/17623021.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("和 SpringFox 的对比"),a("OutboundLink")],1)]),r._v(" "),a("blockquote",[a("p",[r._v("相较于传统且更流行的 SpringFox（Swagger），Spring REST Docs 的实现方式相当新颖，而且有着鲜明的区别，那么不妨在此列举一下两者的区别以及优劣，以便更好的根据实际需求和使用场景选择最合适的工具。\n首先，两者最大的区别就在于根本定位，SpringFox 的定位是和应用一起启动的在线文档，文档的浏览者可以很简单的填写表单并发起一个真实的请求，而 Spring REST Docs 更倾向于导出一份离线文档作为展示，并配合 curl、httpie 这种工具请求真实部署的服务。\n其次，SpringFox 最大的特点是使用简单，只需要在源码中增加一些描述性的注解即可完成整份文档，而使用 Spring REST Docs 的前提条件是需要在项目中对 API 进行单元测试，并且要保证测试是可以稳定执行的，这对于很多团队来说无疑增加了很高的门槛。\n但是对于已经有完整单元测试的团队来说，增加额外的文档描述几乎和 SpringFox 一样简单，并且还能完整的去除源码依赖。除此之外，依靠测试本身也正是 Spring REST Docs 的最大亮点：\n首先，每一次测试都是一个真实的请求（不追究 MockMvc 具体实现细节），它所对应的请求和返回都是真实的，可以轻松将其记录下来作为 Demo 展示。而 SpringFox 只是对 Controller 层的方法进行了扫描，却无法感知 Interceptor、MethodArgumentResolver 这类中间件的存在，只能通过一些全局配置进行额外的描述。\n其次，每一次测试也都是一个独立的请求，使得 Spring REST Docs 可以描述同一个 API 在不同请求参数中返回的不同结果的场景（例如成功或是各种失败情况），而 SpringFox 只能描述单一的方法签名和返回值 Model，却无法描述其具体可能出现的场景。\n最后，错误的文档比没有文档还要糟糕，所以 Spring REST Docs 不仅仅是做 API 文档化，同时也是在做 API 契约化，如果 API 的实现修改破坏了已有的测试，哪怕仅仅是字段定义，都会导致测试的失败。这可以督促 API 的制定者保证对外提供的契约，也可以让 API 的使用者更加放心。\n所以相比之下，如果一个技术氛围良好，对服务严格负责，且愿意尝试 API 单元测试和契约测试的团队来说，我更推荐使用 Spring REST Docs，而如果只是在已有的服务上增加描述性的文档，SpringFox 会是性价比更高的选择。")])]),r._v(" "),a("h1",{attrs:{id:"spring-ai"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-ai"}},[r._v("#")]),r._v(" Spring AI")]),r._v(" "),a("p",[r._v("是一个人工智能工程的应用框架。其目标是将Spring生态系统的设计原则（如可移植性和模块化设计）应用于人工智能领域，并推动将POJO作为应用程序的构建块应用于AI领域。"),a("br"),r._v("\n一行代码即可集成chatGPT等其他模型。")]),r._v(" "),a("h1",{attrs:{id:"spring-batch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-batch"}},[r._v("#")]),r._v(" Spring Batch")]),r._v(" "),a("p",[r._v("简化和优化处理大批量批处理操作的工作。")]),r._v(" "),a("h1",{attrs:{id:"spring-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cli"}},[r._v("#")]),r._v(" Spring CLI")]),r._v(" "),a("p",[r._v("专注于开发人员生产力的CLI。 脚手架。")]),r._v(" "),a("h1",{attrs:{id:"spring-amqp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-amqp"}},[r._v("#")]),r._v(" Spring AMQP")]),r._v(" "),a("p",[r._v("将Spring的核心概念应用于基于AMQP的消息传递解决方案的开发。")]),r._v(" "),a("h1",{attrs:{id:"spring-flo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-flo"}},[r._v("#")]),r._v(" Spring Flo")]),r._v(" "),a("p",[r._v("为管道和简单图形提供了一个基本的可嵌入HTML5可视化生成器。这个库被用作Spring Cloud Data Flow中流生成器的基础。")]),r._v(" "),a("h1",{attrs:{id:"spring-for-apache-kafka"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-for-apache-kafka"}},[r._v("#")]),r._v(" Spring for Apache Kafka")]),r._v(" "),a("p",[r._v("为Apache Kafka提供熟悉的Spring抽象。")]),r._v(" "),a("h1",{attrs:{id:"spring-ldap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-ldap"}},[r._v("#")]),r._v(" Spring LDAP")]),r._v(" "),a("p",[r._v("通过使用Spring熟悉的基于模板的方法简化了使用LDAP的应用程序的开发。")]),r._v(" "),a("h1",{attrs:{id:"spring-for-apache-pulsar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-for-apache-pulsar"}},[r._v("#")]),r._v(" Spring for Apache Pulsar")]),r._v(" "),a("p",[r._v("Apache Pulsar 的支持")]),r._v(" "),a("h1",{attrs:{id:"spring-shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-shell"}},[r._v("#")]),r._v(" Spring Shell")]),r._v(" "),a("p",[r._v("通过基于CLI的资源发现和交互，使编写和测试RESTful应用程序变得更容易。\n没啥用。开发基本不用。")]),r._v(" "),a("h1",{attrs:{id:"spring-statemachine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-statemachine"}},[r._v("#")]),r._v(" Spring Statemachine")]),r._v(" "),a("p",[r._v("将状态机概念与Spring应用程序一起使用。 抽离状态模式的实现。")]),r._v(" "),a("h1",{attrs:{id:"spring-web-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-web-flow"}},[r._v("#")]),r._v(" Spring Web Flow")]),r._v(" "),a("p",[r._v("Spring Web Flow的最佳位置是具有受控导航功能的有状态Web应用程序，\n流程封装了一系列步骤，指导用户执行某些业务任务。\n例如办理登机手续，申请贷款，购物车结帐，甚至向表单添加确认步骤。 这些场景的共同点是以下一个或多个特征："),a("br"),r._v("\n有一个明确的开始和结束点。"),a("br"),r._v("\n用户必须按特定顺序浏览一组屏幕。"),a("br"),r._v("\n直到最后一步，更改才会完成。"),a("br"),r._v("\n一旦完成，就不可能意外地重复交易"),a("br"),r._v(" "),a("code",[r._v("和工作流不同的事，这里注重的用户的业务流程编排，而不是审批/表单的填写。")])]),r._v(" "),a("h1",{attrs:{id:"spring-web-services"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-web-services"}},[r._v("#")]),r._v(" Spring Web Services")]),r._v(" "),a("p",[r._v("Services 的SOAP web接口服务的开发。")]),r._v(" "),a("h1",{attrs:{id:"spring-vault"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-vault"}},[r._v("#")]),r._v(" Spring Vault")]),r._v(" "),a("p",[r._v("集成Vault"),a("br"),r._v("\nHashiCorp Vault 是一个用于管理密码、密钥和证书等秘密的系统，同时还可提供有身份认证和授权保护的加密服务。"),a("br"),r._v("\n利用 Vault 提供的UI、CLI或HTTP API，可以在严格的控制和审计下安全地存储和管理敏感数据。")]),r._v(" "),a("h1",{attrs:{id:"spring-credhub"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-credhub"}},[r._v("#")]),r._v(" Spring CredHub")]),r._v(" "),a("p",[r._v("集成 CredHub\nCredHub 是为 Cloud Foundry 平台集中式的凭证管理框架。")])])}),[],!1,null,null,null);a.default=i.exports}}]);