(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{561:function(_,v,a){"use strict";a.r(v);var t=a(7),r=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"范式设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#范式设计"}},[_._v("#")]),_._v(" 范式设计")]),_._v(" "),v("p",[_._v("第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。一级比一级要求得严格。")]),_._v(" "),v("h2",{attrs:{id:"第一范式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第一范式"}},[_._v("#")]),_._v(" 第一范式")]),_._v(" "),v("ul",[v("li",[_._v("定义： 属于第一范式关系的所有属性都不可再分，即数据项不可分。")]),_._v(" "),v("li",[_._v("理解： 第一范式强调数据表的原子性，是其他范式的基础，列不可再分。")]),_._v(" "),v("li",[_._v("例子:  name-age列具有两个属性，一个name,一个 age不符合第一范式，把它拆分成两列")])]),_._v(" "),v("h2",{attrs:{id:"第二范式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第二范式"}},[_._v("#")]),_._v(" 第二范式")]),_._v(" "),v("ul",[v("li",[_._v("要求: 满足第二范式（2NF）必须先满足第一范式（1NF）")]),_._v(" "),v("li",[_._v("定义: 数据库表中的每个实例或行必须可以被惟一地区分；实体的属性完全依赖于主关键字")]),_._v(" "),v("li",[_._v("理解：需要为表加上主键，不能存在联和主键")]),_._v(" "),v("li",[_._v("例子:  订单表（订单id和产品id保证唯一），产品表   =》  订单表，产品表，订单与商品的中间表")])]),_._v(" "),v("h2",{attrs:{id:"第三范式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第三范式"}},[_._v("#")]),_._v(" 第三范式")]),_._v(" "),v("ul",[v("li",[_._v("要求: 满足第三范式（3NF）必须先满足第二范式（2NF）")]),_._v(" "),v("li",[_._v("定义: 每一个非主属性既不部分依赖于也不传递依赖于业务主键，也就是在第二范式的基础上消除了非主键对主键的传递依赖.")]),_._v(" "),v("li",[_._v("理解: 把大量的数据冗余，单独用张表分离出来，通过关联来存储。")]),_._v(" "),v("li",[_._v("例子：  学生表（学号id，姓名，年龄，性别，系别，系办地址、系办电话）   ； 系别相关信息会出现冗余，所以应该改成学生表和系别表。")])]),_._v(" "),v("h2",{attrs:{id:"其余范式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#其余范式"}},[_._v("#")]),_._v(" 其余范式")]),_._v(" "),v("p",[_._v("看情况满足，一般做到上面的就行了。")]),_._v(" "),v("h1",{attrs:{id:"反范式设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反范式设计"}},[_._v("#")]),_._v(" 反范式设计")]),_._v(" "),v("p",[_._v("完全符合范式化的设计真的完美无缺吗？很明显在实际的业务查询中会大量存在着表的关联查询，而大量的表关联很多的时候非常影响查询的性能。")]),_._v(" "),v("p",[_._v("所谓得反范式化就是为了性能和读取效率得考虑而适当得对数据库设计范式得要求进行违反。允许存在少量得冗余，换句话来说反范式化就是使用空间来换取时间。")]),_._v(" "),v("h2",{attrs:{id:"示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[_._v("#")]),_._v(" 示例")]),_._v(" "),v("ul",[v("li",[_._v("范式化设计： 商品信息、分类信息表、分类和商品对应表")]),_._v(" "),v("li",[_._v("业务中，商品信息和分类信息经常一起查询，3表关联性能快不??")]),_._v(" "),v("li",[_._v("反范式化设计 ： 所以把分类信息也放到商品表里面，冗余存放。")])]),_._v(" "),v("h2",{attrs:{id:"反范式实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反范式实现"}},[_._v("#")]),_._v(" 反范式实现")]),_._v(" "),v("ul",[v("li",[_._v("缓存表，mysql把一些复杂的sql结果存到临时表")]),_._v(" "),v("li",[_._v("汇总表，统计的临时表。")]),_._v(" "),v("li",[_._v("计数器表，计算的临时表。")]),_._v(" "),v("li",[_._v("分库分表中的查询，生成买家和卖家2个副本信息，各自查询各自的表以提交性能。")])]),_._v(" "),v("h1",{attrs:{id:"范式化和反范式总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#范式化和反范式总结"}},[_._v("#")]),_._v(" 范式化和反范式总结")]),_._v(" "),v("h2",{attrs:{id:"范式化优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#范式化优点"}},[_._v("#")]),_._v(" 范式化优点")]),_._v(" "),v("p",[_._v("1、范式化的更新操作通常比反范式化要快。")]),_._v(" "),v("p",[_._v("2、当数据较好地范式化时，就只有很少或者没有重复数据，所以只需要修改更少的数据。")]),_._v(" "),v("p",[_._v("3、范式化的表通常更小，可以更好地放在内存里，所以执行操作会更快。")]),_._v(" "),v("p",[_._v("4、很少有多余的数据意味着检索列表数据时更少需要DISTINCT或者GROUP BY语句。在非范式化的结构中必须使用DISTINCT或者GROUPBY才能获得一份唯一的列表，但是如果是一张单独的表，很可能则只需要简单的查询这张表就行了。")]),_._v(" "),v("h2",{attrs:{id:"范式化缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#范式化缺点"}},[_._v("#")]),_._v(" 范式化缺点")]),_._v(" "),v("ul",[v("li",[_._v("范式化设计的缺点是通常需要关联。稍微复杂一些的查询语句在符合范式的表上都可能需要至少一次关联，也许更多。")]),_._v(" "),v("li",[_._v("这不但代价昂贵，也可能使一些索引策略无效。")]),_._v(" "),v("li",[_._v("例如，范式化可能将列存放在不同的表中，而这些列如果在一个表中本可以属于同一个索引。")])]),_._v(" "),v("h2",{attrs:{id:"反范式化设计优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反范式化设计优点"}},[_._v("#")]),_._v(" 反范式化设计优点")]),_._v(" "),v("ul",[v("li",[_._v("反范式设计可以减少表的关联")]),_._v(" "),v("li",[_._v("可以更好的进行索引优化。")])]),_._v(" "),v("h2",{attrs:{id:"反范式化设计缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反范式化设计缺点"}},[_._v("#")]),_._v(" 反范式化设计缺点")]),_._v(" "),v("ul",[v("li",[_._v("存在数据冗余及数据维护异常")]),_._v(" "),v("li",[_._v("对数据的修改需要更多的成本")])]),_._v(" "),v("h1",{attrs:{id:"参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://zgcr.gitlab.io/2019/06/23/shu-ju-ku-liu-chong-fan-shi-xiang-jie-1nf-2nf-3nf-bcnf-4nf-5nf/",target:"_blank",rel:"noopener noreferrer"}},[_._v("数据库的基本概念"),v("OutboundLink")],1)]),_._v(" "),v("blockquote",[v("p",[_._v("六种范式有不错的例子。")])]),_._v(" "),v("p",[v("a",{attrs:{href:"https://www.cnblogs.com/Diyo/p/11414424.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("数据库设计六大范式"),v("OutboundLink")],1)]),_._v(" "),v("blockquote",[v("p",[_._v("假设仓库管理关系表为StorehouseManage(仓库ID,存储物品ID,管理员ID,数量)，且有一个管理员只在一个仓库工作；一个仓库可以存储多种物品。这个数据库表中存在如下决定关系：")]),_._v(" "),v("p",[_._v("(仓库ID,存储物品ID) →(管理员ID,数量)")]),_._v(" "),v("p",[_._v("(管理员ID,存储物品ID) → (仓库ID,数量)")]),_._v(" "),v("p",[_._v("所以，(仓库ID,存储物品ID)和(管理员ID,存储物品ID)都是StorehouseManage的候选关键字，表中的唯一非关键字段为数量，它是符合第三范式的。但是，由于存在如下决定关系：")]),_._v(" "),v("p",[_._v("(仓库ID) → (管理员ID)")]),_._v(" "),v("p",[_._v("(管理员ID) → (仓库ID)")]),_._v(" "),v("p",[_._v("即存在关键字段决定关键字段的情况，所以其不符合BCNF范式。它会出现如下异常情况：")]),_._v(" "),v("p",[_._v("(1) 删除异常：")]),_._v(" "),v("p",[_._v('当仓库被清空后，所有"存储物品ID"和"数量"信息被删除的同时，"仓库ID"和"管理员ID"信息也被删除了。')]),_._v(" "),v("p",[_._v("(2) 插入异常：")]),_._v(" "),v("p",[_._v("当仓库没有存储任何物品时，无法给仓库分配管理员。")]),_._v(" "),v("p",[_._v("(3) 更新异常：")]),_._v(" "),v("p",[_._v("如果仓库换了管理员，则表中所有行的管理员ID都要修改。")]),_._v(" "),v("p",[_._v("把仓库管理关系表分解为二个关系表：")]),_._v(" "),v("p",[_._v("仓库管理：StorehouseManage(仓库ID,管理员ID)；")]),_._v(" "),v("p",[_._v("仓库：Storehouse(仓库ID,存储物品ID,数量)。")]),_._v(" "),v("p",[_._v("这样的数据库表是符合BCNF范式的，消除了删除异常、插入异常和更新异常。")])])])}),[],!1,null,null,null);v.default=r.exports}}]);