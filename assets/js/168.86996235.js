(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{526:function(v,t,_){"use strict";_.r(t);var a=_(7),r=Object(a.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"mq-的基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mq-的基本概念"}},[v._v("#")]),v._v(" MQ 的基本概念")]),v._v(" "),t("p",[v._v("MQ全称 Message Queue（消息队列），是在消息的传输过程中保存消息的容器。多用于分布式系统之间进行通信。")]),v._v(" "),t("h1",{attrs:{id:"优势-应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优势-应用"}},[v._v("#")]),v._v(" 优势/应用")]),v._v(" "),t("h2",{attrs:{id:"应用解耦"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用解耦"}},[v._v("#")]),v._v(" 应用解耦")]),v._v(" "),t("ul",[t("li",[v._v("系统的耦合性越高，容错性就越低，可维护性就越低。")]),v._v(" "),t("li",[v._v("使用 MQ 使得应用间解耦，提升容错性和可维护性。")])]),v._v(" "),t("h2",{attrs:{id:"异步提速"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步提速"}},[v._v("#")]),v._v(" 异步提速")]),v._v(" "),t("ul",[t("li",[v._v("一个下单操作耗时：20 + 300（库存） + 300（支付） + 300（物流） = 920ms 用户点击完下单按钮后，需要等待920ms才能得到下单响应，太慢！")]),v._v(" "),t("li",[v._v("用户点击完下单按钮后，只需等待25ms就能得到下单响应 (20 + 5(mq) = 25ms)。")]),v._v(" "),t("li",[v._v("提升用户体验和系统吞吐量（单位时间内处理请求的数目）。")])]),v._v(" "),t("h2",{attrs:{id:"削峰填谷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#削峰填谷"}},[v._v("#")]),v._v(" 削峰填谷")]),v._v(" "),t("ul",[t("li",[v._v("请求瞬间增多，每秒5000个请求，但是系统每秒最大处理1000请求，就挂了。")]),v._v(" "),t("li",[v._v("使用了 MQ 之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在 MQ 中，高峰就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000，直到消费完积压的消息，这就叫做“填谷”。")]),v._v(" "),t("li",[v._v("使用MQ后，可以提高系统稳定性。")])]),v._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("ul",[t("li",[v._v("应用解耦：提高系统容错性和可维护性")]),v._v(" "),t("li",[v._v("异步提速：提升用户体验和系统吞吐量")]),v._v(" "),t("li",[v._v("削峰填谷：提高系统稳定性")])]),v._v(" "),t("h1",{attrs:{id:"劣势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#劣势"}},[v._v("#")]),v._v(" 劣势")]),v._v(" "),t("h2",{attrs:{id:"系统可用性降低"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统可用性降低"}},[v._v("#")]),v._v(" 系统可用性降低")]),v._v(" "),t("p",[v._v("系统引入的外部依赖越多，系统稳定性越差。一旦 MQ 宕机，就会对业务造成影响。如何保证MQ的高可用？")]),v._v(" "),t("h2",{attrs:{id:"系统复杂度提高"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统复杂度提高"}},[v._v("#")]),v._v(" 系统复杂度提高")]),v._v(" "),t("p",[v._v("MQ 的加入大大增加了系统的复杂度，以前系统间是同步的远程调用，现在是通过 MQ 进行异步调用。如何保证消息不被丢失等情况？")]),v._v(" "),t("h2",{attrs:{id:"消息一致性问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息一致性问题"}},[v._v("#")]),v._v(" 消息一致性问题")]),v._v(" "),t("p",[v._v("A系统处理完业务，通过MQ发送消息给B、C系统进行后续的业务处理。如果B系统处理成功，C系统处理失败怎么办？这就需要考虑如何保证消息数据处理的一致性。")]),v._v(" "),t("h1",{attrs:{id:"常见的-mq-产品"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的-mq-产品"}},[v._v("#")]),v._v(" 常见的 MQ 产品")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th"),v._v(" "),t("th",[t("strong",[v._v("RabbitMQ")])]),v._v(" "),t("th",[t("strong",[v._v("ActiveMQ")])]),v._v(" "),t("th",[t("strong",[v._v("RocketMQ")])]),v._v(" "),t("th",[t("strong",[v._v("Kafka")])])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("公司/社区")]),v._v(" "),t("td",[v._v("Rabbit")]),v._v(" "),t("td",[v._v("Apache")]),v._v(" "),t("td",[v._v("阿里")]),v._v(" "),t("td",[v._v("Apache")])]),v._v(" "),t("tr",[t("td",[v._v("开发语言")]),v._v(" "),t("td",[v._v("Erlang")]),v._v(" "),t("td",[v._v("Java")]),v._v(" "),t("td",[v._v("Java")]),v._v(" "),t("td",[v._v("Scala&Java")])]),v._v(" "),t("tr",[t("td",[v._v("协议支持")]),v._v(" "),t("td",[v._v("AMQP，XMPP，SMTP，STOMP")]),v._v(" "),t("td",[v._v("OpenWire,STOMP，REST,XMPP,AMQP")]),v._v(" "),t("td",[v._v("自定义")]),v._v(" "),t("td",[v._v("自定义协议，社区封装了http协议支持")])]),v._v(" "),t("tr",[t("td",[v._v("客户端支持语言")]),v._v(" "),t("td",[v._v("官方支持Erlang，Java，Ruby等,社区产出多种API，几乎支持所有语言")]),v._v(" "),t("td",[v._v("Java，C，C++，Python，PHP，Perl，.net等")]),v._v(" "),t("td",[v._v("Java，C++（不成熟）")]),v._v(" "),t("td",[v._v("官方支持Java,社区产出多种API，如PHP，Python等")])]),v._v(" "),t("tr",[t("td",[v._v("单机吞吐量")]),v._v(" "),t("td",[v._v("万级（其次）")]),v._v(" "),t("td",[v._v("万级（最差）")]),v._v(" "),t("td",[v._v("十万级（最好）")]),v._v(" "),t("td",[v._v("十万级（次之）")])]),v._v(" "),t("tr",[t("td",[v._v("消息延迟")]),v._v(" "),t("td",[v._v("微妙级")]),v._v(" "),t("td",[v._v("毫秒级")]),v._v(" "),t("td",[v._v("毫秒级")]),v._v(" "),t("td",[v._v("毫秒以内")])]),v._v(" "),t("tr",[t("td",[v._v("功能特性")]),v._v(" "),t("td",[v._v("并发能力强，性能极其好，延时低，社区活跃，管理界面丰富")]),v._v(" "),t("td",[v._v("老牌产品，成熟度高，文档较多")]),v._v(" "),t("td",[v._v("MQ功能比较完备，扩展性佳")]),v._v(" "),t("td",[v._v("只支持主要的MQ功能，毕竟是为大数据领域准备的。")])])])]),v._v(" "),t("h1",{attrs:{id:"amqp协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#amqp协议"}},[v._v("#")]),v._v(" AMQP协议")]),v._v(" "),t("p",[v._v("AMQP，即 Advanced Message Queuing Protocol（高级消息队列协议），是一个网络协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。2006年，AMQP 规范发布。类比HTTP。")])])}),[],!1,null,null,null);t.default=r.exports}}]);