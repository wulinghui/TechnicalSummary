(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{517:function(t,n,o){"use strict";o.r(n);var a=o(7),r=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/lz710117239/category_9277290.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot源码系列"),n("OutboundLink")],1)]),t._v(" "),n("h1",{attrs:{id:"条件注解-conditional-annotation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#条件注解-conditional-annotation"}},[t._v("#")]),t._v(" 条件注解(Conditional Annotation)")]),t._v(" "),n("ul",[n("li",[n("p",[n("a",{attrs:{href:"https://www.jianshu.com/p/c4df7be75d6e",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot源码分析之条件注解的底层实现"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://blog.csdn.net/weixin_30515513/article/details/98018583",target:"_blank",rel:"noopener noreferrer"}},[t._v("springboot源码解析(六)@ConditionalOnClass"),n("OutboundLink")],1)]),t._v(" "),n("blockquote",[n("p",[t._v("问: 1. Springboot的ConditionalOnClass注解，原因是我们的jar包里面可能没有对应的class，而使用ConditionalOnClass标注的Configuration类又import了这个类，那么如果想加载Configuration类，就会报ClassNotFoundException,那么又如何取到这个类上的注解呢。 2. 同时他又如何实现条件注解呢??")]),t._v(" "),n("p",[t._v("答:    可以看OnClassCondition源码知道，他实现了2个重要接口: AutoConfigurationImportFilter 和Condition。")]),t._v(" "),n("p",[t._v("通过ASM技术可以获得AutoConfigurationMetadata，他就知道依赖的配置类的一些信息。如果没有的话，就会跳过这个配置类，不导入成配置类，往applicationContext里面放了，也就不会进行后面的扫描包的工作了。\n如果上面条件满足:  在判断成为beanDefion的时候还会调用Condition判断，是否最终的实例化bean。\n他们这2步底层最终都调用了 classLoader.loadClass 用于确保。")])])])])])}),[],!1,null,null,null);n.default=r.exports}}]);